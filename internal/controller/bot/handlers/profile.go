package handlers

import (
	"context"
	"fmt"

	"3xui-bot/internal/usecase"
	"3xui-bot/internal/interfaces"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ProfileHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /profile
type ProfileHandler struct {
	interfaces.BaseHandlerInterface
	UseCaseManager *usecase.UseCaseManager
}

// NewProfileHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
func NewProfileHandler(useCaseManager *usecase.UseCaseManager) *ProfileHandler {
	return &ProfileHandler{
		UseCaseManager: useCaseManager,
	}
}

// Handle –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /profile
func (h *ProfileHandler) Handle(ctx context.Context, update tgbotapi.Update) error {
	userID := h.GetUserID(update)
	chatID := h.GetChatID(update)

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	profile, err := h.UseCaseManager.GetUserUseCase().GetUserProfile(ctx, userID)
	if err != nil {
		h.HandleError(ctx, chatID, err, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return err
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
	message := h.formatProfileMessage(profile)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := h.createProfileKeyboard()

	return h.SendMessage(ctx, chatID, message, keyboard)
}

// formatProfileMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
func (h *ProfileHandler) formatProfileMessage(profile *usecase.UserProfile) string {
	message := fmt.Sprintf(`
üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üÜî ID: <code>%d</code>
üë§ –ò–º—è: %s
üìß Username: @%s
üåê –Ø–∑—ã–∫: %s
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %s

<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>
`, profile.User.ID, profile.User.FirstName, profile.User.Username, profile.User.LanguageCode, profile.RegistrationDate)

	if profile.Subscription != nil {
		message += fmt.Sprintf(`
‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: %s
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: %d
`, profile.Subscription.EndDate.Format("02.01.2006 15:04"), profile.DaysRemaining)
	} else {
		message += `
‚ùå –°—Ç–∞—Ç—É—Å: –ù–µ–∞–∫—Ç–∏–≤–Ω–∞
üí≥ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
`
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
	if profile.ReferralStats != nil {
		message += fmt.Sprintf(`
<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>
üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: %d
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–Ω–µ–π: %d
`, profile.ReferralStats.TotalReferrals, profile.ReferralStats.TotalRewardDays)
	}

	return message
}

// createProfileKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
func (h *ProfileHandler) createProfileKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîó VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "vpn"),
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", "subscription"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "referral"),
			tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
}

// Command –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
func (h *ProfileHandler) Command() string {
	return "profile"
}

// Description –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
func (h *ProfileHandler) Description() string {
	return "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
}
