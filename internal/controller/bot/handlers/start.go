package handlers

import (
	"context"
	"fmt"

	"3xui-bot/internal/interfaces"
	"3xui-bot/internal/usecase"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// StartHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
type StartHandler struct {
	interfaces.BaseHandlerInterface
	UseCaseManager *usecase.UseCaseManager
}

// NewStartHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
func NewStartHandler(useCaseManager *usecase.UseCaseManager) *StartHandler {
	return &StartHandler{
		UseCaseManager: useCaseManager,
	}
}

// Handle –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *StartHandler) Handle(ctx context.Context, update tgbotapi.Update) error {
	userID := h.GetUserID(update)
	chatID := h.GetChatID(update)
	username := h.GetUsername(update)
	firstName := h.GetFirstName(update)
	lastName := h.GetLastName(update)
	languageCode := h.GetLanguageCode(update)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ
	referrerID := h.extractReferrerID(update)

	var user *usecase.UserProfile
	var err error

	if referrerID > 0 {
		// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
		user, err = h.processReferralRegistration(ctx, userID, referrerID, username, firstName, lastName, languageCode)
	} else {
		// –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
		user, err = h.processNormalRegistration(ctx, userID, username, firstName, lastName, languageCode)
	}

	if err != nil {
		h.HandleError(ctx, chatID, err, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	return h.sendWelcomeMessage(ctx, chatID, user, referrerID > 0)
}

// extractReferrerID –∏–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
func (h *StartHandler) extractReferrerID(update tgbotapi.Update) int64 {
	text := h.GetText(update)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ /start
	if len(text) > 6 && text[:6] == "/start" {
		// –ò—â–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å–ª–µ /start
		parts := text[6:]
		if len(parts) > 0 {
			// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ref_123456
			parts = parts[1:] // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª
			if len(parts) > 4 && parts[:4] == "ref_" {
				// –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
				var referrerID int64
				if _, err := fmt.Sscanf(parts[4:], "%d", &referrerID); err == nil {
					return referrerID
				}
			}
		}
	}

	return 0
}

// processReferralRegistration –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
func (h *StartHandler) processReferralRegistration(ctx context.Context, userID, referrerID int64, username, firstName, lastName, languageCode string) (*usecase.UserProfile, error) {
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
	_, err := h.UseCaseManager.ProcessReferralRegistration(ctx, referrerID, userID, username, firstName, lastName, languageCode)
	if err != nil {
		return nil, fmt.Errorf("failed to process referral registration: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	profile, err := h.UseCaseManager.GetUserUseCase().GetUserProfile(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user profile: %w", err)
	}

	return profile, nil
}

// processNormalRegistration –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
func (h *StartHandler) processNormalRegistration(ctx context.Context, userID int64, username, firstName, lastName, languageCode string) (*usecase.UserProfile, error) {
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err := h.UseCaseManager.ProcessUserRegistration(ctx, userID, username, firstName, lastName, languageCode)
	if err != nil {
		return nil, fmt.Errorf("failed to process user registration: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	profile, err := h.UseCaseManager.GetUserUseCase().GetUserProfile(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user profile: %w", err)
	}

	return profile, nil
}

// sendWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (h *StartHandler) sendWelcomeMessage(ctx context.Context, chatID int64, user *usecase.UserProfile, isReferral bool) error {
	var message string
	var keyboard tgbotapi.InlineKeyboardMarkup

	if isReferral {
		message = fmt.Sprintf(`
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!

üéÅ –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!
‚è∞ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π

üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π:
`, user.User.FirstName)
	} else {
		message = fmt.Sprintf(`
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!

üéÅ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è
üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π:
`, user.User.FirstName)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard = h.createMainKeyboard()

	return h.SendMessage(ctx, chatID, message, keyboard)
}

// createMainKeyboard —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func (h *StartHandler) createMainKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "profile"),
			tgbotapi.NewInlineKeyboardButtonData("üîó VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "vpn"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", "subscription"),
			tgbotapi.NewInlineKeyboardButtonData("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", "promocode"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "referral"),
			tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
	)
}

// Command –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
func (h *StartHandler) Command() string {
	return "start"
}

// Description –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
func (h *StartHandler) Description() string {
	return "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
}
