package handlers

import (
	"context"
	"strings"

	"3xui-bot/internal/interfaces"
	"3xui-bot/internal/usecase"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// CallbackHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query
type CallbackHandler struct {
	interfaces.BaseHandlerInterface
	UseCaseManager *usecase.UseCaseManager
}

// NewCallbackHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query
func NewCallbackHandler(useCaseManager *usecase.UseCaseManager) *CallbackHandler {
	return &CallbackHandler{
		UseCaseManager: useCaseManager,
	}
}

// Handle –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query
func (h *CallbackHandler) Handle(ctx context.Context, update tgbotapi.Update) error {
	callbackQuery := update.CallbackQuery
	userID := h.GetUserID(update)
	chatID := h.GetChatID(update)
	messageID := h.GetMessageID(update)
	data := callbackQuery.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	h.AnswerCallbackQuery(ctx, callbackQuery.ID, "", false)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback
	switch {
	case data == "main_menu":
		return h.showMainMenu(ctx, chatID, messageID)
	case data == "profile":
		return h.showProfile(ctx, chatID, int64(messageID), userID)
	case data == "vpn":
		return h.showVPN(ctx, chatID, int64(messageID), userID)
	case data == "subscription":
		return h.showSubscription(ctx, chatID, int64(messageID), userID)
	case data == "promocode":
		return h.showPromocode(ctx, chatID, messageID)
	case data == "referral":
		return h.showReferral(ctx, chatID, int64(messageID), userID)
	case data == "settings":
		return h.showSettings(ctx, chatID, int(messageID))
	case data == "help":
		return h.showHelp(ctx, chatID, messageID)
	case strings.HasPrefix(data, "vpn_"):
		return h.handleVPNAction(ctx, chatID, int64(messageID), userID, data)
	case strings.HasPrefix(data, "subscription_"):
		return h.handleSubscriptionAction(ctx, chatID, int64(messageID), userID, data)
	case strings.HasPrefix(data, "referral_"):
		return h.handleReferralAction(ctx, chatID, int64(messageID), userID, data)
	case strings.HasPrefix(data, "settings_"):
		return h.handleSettingsAction(ctx, chatID, int64(messageID), userID, data)
	default:
		return h.showMainMenu(ctx, chatID, messageID)
	}
}

// showMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (h *CallbackHandler) showMainMenu(ctx context.Context, chatID int64, messageID int) error {
	message := `
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "profile"),
			tgbotapi.NewInlineKeyboardButtonData("üîó VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "vpn"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", "subscription"),
			tgbotapi.NewInlineKeyboardButtonData("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", "promocode"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "referral"),
			tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
	)

	return h.EditMessageText(ctx, chatID, messageID, message, keyboard)
}

// showProfile –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *CallbackHandler) showProfile(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	// –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	update := tgbotapi.Update{
		Message: &tgbotapi.Message{
			From: &tgbotapi.User{ID: userID},
			Chat: &tgbotapi.Chat{ID: chatID},
		},
	}

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è
	profileHandler := NewProfileHandler(h.UseCaseManager)
	profileHandler.BaseHandlerInterface = h.BaseHandlerInterface
	return profileHandler.Handle(ctx, update)
}

// showVPN –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (h *CallbackHandler) showVPN(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	// –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	update := tgbotapi.Update{
		Message: &tgbotapi.Message{
			From: &tgbotapi.User{ID: userID},
			Chat: &tgbotapi.Chat{ID: chatID},
		},
	}

	vpnHandler := NewVPNHandler(h.UseCaseManager)
	vpnHandler.BaseHandlerInterface = h.BaseHandlerInterface
	return vpnHandler.Handle(ctx, update)
}

// showSubscription –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
func (h *CallbackHandler) showSubscription(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	// –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	update := tgbotapi.Update{
		Message: &tgbotapi.Message{
			From: &tgbotapi.User{ID: userID},
			Chat: &tgbotapi.Chat{ID: chatID},
		},
	}

	subscriptionHandler := NewSubscriptionHandler(h.UseCaseManager)
	subscriptionHandler.BaseHandlerInterface = h.BaseHandlerInterface
	return subscriptionHandler.Handle(ctx, update)
}

// showPromocode –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã
func (h *CallbackHandler) showPromocode(ctx context.Context, chatID int64, messageID int) error {
	// –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	update := tgbotapi.Update{
		Message: &tgbotapi.Message{
			Chat: &tgbotapi.Chat{ID: chatID},
		},
	}

	promocodeHandler := NewPromocodeHandler(h.UseCaseManager)
	promocodeHandler.BaseHandlerInterface = h.BaseHandlerInterface
	return promocodeHandler.Handle(ctx, update)
}

// showReferral –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—ã
func (h *CallbackHandler) showReferral(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	// –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	update := tgbotapi.Update{
		Message: &tgbotapi.Message{
			From: &tgbotapi.User{ID: userID},
			Chat: &tgbotapi.Chat{ID: chatID},
		},
	}

	referralHandler := NewReferralHandler(h.UseCaseManager)
	referralHandler.BaseHandlerInterface = h.BaseHandlerInterface
	return referralHandler.Handle(ctx, update)
}

// showSettings –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
func (h *CallbackHandler) showSettings(ctx context.Context, chatID int64, messageID int) error {
	// –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	update := tgbotapi.Update{
		Message: &tgbotapi.Message{
			Chat: &tgbotapi.Chat{ID: chatID},
		},
	}

	settingsHandler := NewSettingsHandler(h.UseCaseManager)
	settingsHandler.BaseHandlerInterface = h.BaseHandlerInterface
	return settingsHandler.Handle(ctx, update)
}

// showHelp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å
func (h *CallbackHandler) showHelp(ctx context.Context, chatID int64, messageID int) error {
	// –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	update := tgbotapi.Update{
		Message: &tgbotapi.Message{
			Chat: &tgbotapi.Chat{ID: chatID},
		},
	}

	helpHandler := NewHelpHandler(h.UseCaseManager)
	helpHandler.BaseHandlerInterface = h.BaseHandlerInterface
	return helpHandler.Handle(ctx, update)
}

// handleVPNAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å VPN
func (h *CallbackHandler) handleVPNAction(ctx context.Context, chatID int64, messageID int64, userID int64, action string) error {
	switch action {
	case "vpn_create":
		return h.createVPNConnection(ctx, chatID, messageID, userID)
	case "vpn_refresh":
		return h.refreshVPNConnection(ctx, chatID, messageID, userID)
	case "vpn_delete":
		return h.deleteVPNConnection(ctx, chatID, messageID, userID)
	default:
		return h.showVPN(ctx, chatID, messageID, userID)
	}
}

// handleSubscriptionAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
func (h *CallbackHandler) handleSubscriptionAction(ctx context.Context, chatID int64, messageID int64, userID int64, action string) error {
	switch action {
	case "subscription_extend":
		return h.showSubscriptionPlans(ctx, chatID, messageID)
	case "subscription_1_month":
		return h.createPayment(ctx, chatID, messageID, userID, 1, 100)
	case "subscription_3_months":
		return h.createPayment(ctx, chatID, messageID, userID, 3, 250)
	case "subscription_6_months":
		return h.createPayment(ctx, chatID, messageID, userID, 6, 450)
	case "subscription_1_year":
		return h.createPayment(ctx, chatID, messageID, userID, 12, 800)
	default:
		return h.showSubscription(ctx, chatID, messageID, userID)
	}
}

// handleReferralAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
func (h *CallbackHandler) handleReferralAction(ctx context.Context, chatID int64, messageID int64, userID int64, action string) error {
	switch action {
	case "referral_share":
		return h.shareReferralLink(ctx, chatID, messageID, userID)
	case "referral_stats":
		return h.showReferralStats(ctx, chatID, messageID, userID)
	default:
		return h.showReferral(ctx, chatID, messageID, userID)
	}
}

// handleSettingsAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
func (h *CallbackHandler) handleSettingsAction(ctx context.Context, chatID int64, messageID int64, userID int64, action string) error {
	switch action {
	case "settings_language":
		return h.showLanguageSettings(ctx, chatID, messageID)
	case "settings_notifications":
		return h.showNotificationSettings(ctx, chatID, messageID)
	case "settings_stats":
		return h.showUserStats(ctx, chatID, messageID, userID)
	case "settings_support":
		return h.showSupport(ctx, chatID, messageID)
	case "settings_about":
		return h.showAbout(ctx, chatID, messageID)
	case "settings_export":
		return h.exportUserData(ctx, chatID, messageID, userID)
	case "settings_delete":
		return h.showDeleteAccount(ctx, chatID, messageID, userID)
	default:
		return h.showSettings(ctx, chatID, int(messageID))
	}
}

// Command –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
func (h *CallbackHandler) Command() string {
	return "callback"
}

// Description –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
func (h *CallbackHandler) Description() string {
	return "–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤
func (h *CallbackHandler) createVPNConnection(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	return h.showVPN(ctx, chatID, messageID, userID)
}

func (h *CallbackHandler) refreshVPNConnection(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	return h.showVPN(ctx, chatID, messageID, userID)
}

func (h *CallbackHandler) deleteVPNConnection(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	return h.showVPN(ctx, chatID, messageID, userID)
}

func (h *CallbackHandler) showSubscriptionPlans(ctx context.Context, chatID int64, messageID int64) error {
	return h.showSubscription(ctx, chatID, messageID, 0)
}

func (h *CallbackHandler) createPayment(ctx context.Context, chatID int64, messageID int64, userID int64, months int, amount int) error {
	return h.showSubscription(ctx, chatID, messageID, userID)
}

func (h *CallbackHandler) shareReferralLink(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	return h.showReferral(ctx, chatID, messageID, userID)
}

func (h *CallbackHandler) showReferralStats(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	return h.showReferral(ctx, chatID, messageID, userID)
}

func (h *CallbackHandler) showLanguageSettings(ctx context.Context, chatID int64, messageID int64) error {
	return h.showSettings(ctx, chatID, int(messageID))
}

func (h *CallbackHandler) showNotificationSettings(ctx context.Context, chatID int64, messageID int64) error {
	return h.showSettings(ctx, chatID, int(messageID))
}

func (h *CallbackHandler) showUserStats(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	return h.showSettings(ctx, chatID, int(messageID))
}

func (h *CallbackHandler) showSupport(ctx context.Context, chatID int64, messageID int64) error {
	return h.showSettings(ctx, chatID, int(messageID))
}

func (h *CallbackHandler) showAbout(ctx context.Context, chatID int64, messageID int64) error {
	return h.showSettings(ctx, chatID, int(messageID))
}

func (h *CallbackHandler) exportUserData(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	return h.showSettings(ctx, chatID, int(messageID))
}

func (h *CallbackHandler) showDeleteAccount(ctx context.Context, chatID int64, messageID int64, userID int64) error {
	return h.showSettings(ctx, chatID, int(messageID))
}
