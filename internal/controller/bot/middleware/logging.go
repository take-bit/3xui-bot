package middleware

import (
	"context"
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// LoggingMiddleware –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
type LoggingMiddleware struct{}

// NewLoggingMiddleware —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func NewLoggingMiddleware() *LoggingMiddleware {
	return &LoggingMiddleware{}
}

// Process –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (m *LoggingMiddleware) Process(ctx context.Context, update tgbotapi.Update, next func(ctx context.Context, update tgbotapi.Update) error) error {
	start := time.Now()

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	m.logUpdate(update)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	err := next(ctx, update)

	// –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	duration := time.Since(start)
	m.logResult(update, err, duration)

	return err
}

// logUpdate –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
func (m *LoggingMiddleware) logUpdate(update tgbotapi.Update) {
	var logMessage string

	if update.Message != nil {
		message := update.Message
		logMessage = fmt.Sprintf("Message from %s (%d): %s",
			message.From.UserName, message.From.ID, message.Text)
	} else if update.CallbackQuery != nil {
		callback := update.CallbackQuery
		logMessage = fmt.Sprintf("Callback from %s (%d): %s",
			callback.From.UserName, callback.From.ID, callback.Data)
	} else {
		logMessage = "Unknown update type"
	}

	log.Printf("üì® %s", logMessage)
}

// logResult –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
func (m *LoggingMiddleware) logResult(update tgbotapi.Update, err error, duration time.Duration) {
	var logMessage string

	if err != nil {
		logMessage = fmt.Sprintf("‚ùå Error processing update: %v (took %v)", err, duration)
	} else {
		logMessage = fmt.Sprintf("‚úÖ Successfully processed update (took %v)", duration)
	}

	log.Printf("üì§ %s", logMessage)
}
