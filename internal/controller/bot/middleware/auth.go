package middleware

import (
	"context"
	"fmt"

	"3xui-bot/internal/usecase"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// AuthMiddleware –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
type AuthMiddleware struct {
	useCaseManager *usecase.UseCaseManager
}

// NewAuthMiddleware —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
func NewAuthMiddleware(useCaseManager *usecase.UseCaseManager) *AuthMiddleware {
	return &AuthMiddleware{
		useCaseManager: useCaseManager,
	}
}

// Process –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (m *AuthMiddleware) Process(ctx context.Context, update tgbotapi.Update, next func(ctx context.Context, update tgbotapi.Update) error) error {
	// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userID := m.getUserID(update)
	if userID == 0 {
		return fmt.Errorf("unable to get user ID from update")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	profile, err := m.useCaseManager.GetUserUseCase().GetUserProfile(ctx, userID)
	if err != nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
		username := m.getUsername(update)
		firstName := m.getFirstName(update)
		lastName := m.getLastName(update)
		languageCode := m.getLanguageCode(update)

		_, err = m.useCaseManager.ProcessUserRegistration(ctx, userID, username, firstName, lastName, languageCode)
		if err != nil {
			return fmt.Errorf("failed to register user: %w", err)
		}
	} else if profile.IsBlocked {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
		chatID := m.getChatID(update)
		message := "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
		// TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		_ = chatID
		_ = message

		return fmt.Errorf("user is blocked")
	}

	// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
	return next(ctx, update)
}

// getUserID –ø–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (m *AuthMiddleware) getUserID(update tgbotapi.Update) int64 {
	if update.Message != nil {
		return update.Message.From.ID
	}
	if update.CallbackQuery != nil {
		return update.CallbackQuery.From.ID
	}
	return 0
}

// getChatID –ø–æ–ª—É—á–∞–µ—Ç ID —á–∞—Ç–∞ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (m *AuthMiddleware) getChatID(update tgbotapi.Update) int64 {
	if update.Message != nil {
		return update.Message.Chat.ID
	}
	if update.CallbackQuery != nil {
		return update.CallbackQuery.Message.Chat.ID
	}
	return 0
}

// getUsername –ø–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (m *AuthMiddleware) getUsername(update tgbotapi.Update) string {
	if update.Message != nil {
		return update.Message.From.UserName
	}
	if update.CallbackQuery != nil {
		return update.CallbackQuery.From.UserName
	}
	return ""
}

// getFirstName –ø–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (m *AuthMiddleware) getFirstName(update tgbotapi.Update) string {
	if update.Message != nil {
		return update.Message.From.FirstName
	}
	if update.CallbackQuery != nil {
		return update.CallbackQuery.From.FirstName
	}
	return ""
}

// getLastName –ø–æ–ª—É—á–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (m *AuthMiddleware) getLastName(update tgbotapi.Update) string {
	if update.Message != nil {
		return update.Message.From.LastName
	}
	if update.CallbackQuery != nil {
		return update.CallbackQuery.From.LastName
	}
	return ""
}

// getLanguageCode –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (m *AuthMiddleware) getLanguageCode(update tgbotapi.Update) string {
	if update.Message != nil {
		return update.Message.From.LanguageCode
	}
	if update.CallbackQuery != nil {
		return update.CallbackQuery.From.LanguageCode
	}
	return ""
}
