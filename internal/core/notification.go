package core

import (
	"time"
)

// Notification –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
type Notification struct {
	ID        string    `json:"id"`
	UserID    int64     `json:"user_id"`
	Type      string    `json:"type"`
	Title     string    `json:"title"`
	Message   string    `json:"message"`
	IsRead    bool      `json:"is_read"`
	CreatedAt time.Time `json:"created_at"`
}

// NotificationType –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type NotificationType string

const (
	NotificationTypeInfo    NotificationType = "info"
	NotificationTypeWarning NotificationType = "warning"
	NotificationTypeError   NotificationType = "error"
	NotificationTypeSuccess NotificationType = "success"
)

// MarkAsRead –æ—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
func (n *Notification) MarkAsRead() {
	n.IsRead = true
}

// IsUnread –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º
func (n *Notification) IsUnread() bool {
	return !n.IsRead
}

// GetTypeIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (n *Notification) GetTypeIcon() string {
	switch NotificationType(n.Type) {
	case NotificationTypeInfo:
		return "‚ÑπÔ∏è"
	case NotificationTypeWarning:
		return "‚ö†Ô∏è"
	case NotificationTypeError:
		return "‚ùå"
	case NotificationTypeSuccess:
		return "‚úÖ"
	default:
		return "üìå"
	}
}
