package ui

import (
	"fmt"
	"strings"

	"3xui-bot/internal/core"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ============================================================================
// –ö–õ–ê–í–ò–ê–¢–£–†–´
// ============================================================================

// GetWelcomeKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
func GetWelcomeKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéâ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø", "get_trial"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –¢–∞—Ä–∏—Ñ—ã", "open_pricing"),
			tgbotapi.NewInlineKeyboardButtonData("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "open_profile"),
		),
	)
}

// GetProfileKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
func GetProfileKeyboard(isPremium bool) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	if isPremium {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "my_subscriptions"),
			tgbotapi.NewInlineKeyboardButtonData("üîë –ú–æ–∏ –∫–ª—é—á–∏/–∫–æ–Ω—Ñ–∏–≥–∏", "open_keys"),
		))
	} else {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "my_subscriptions"),
			tgbotapi.NewInlineKeyboardButtonData("üîë –ú–æ–∏ –∫–ª—é—á–∏/–∫–æ–Ω—Ñ–∏–≥–∏", "open_keys"),
		))
	}

	// –ö–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "open_referrals"),
		tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "open_support"),
	))

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_menu"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetPricingKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
func GetPricingKeyboard(plans []*core.Plan) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
	for _, plan := range plans {
		if plan.IsActive {
			buttonText := fmt.Sprintf("üì¶ %s - %.0f‚ÇΩ (%s)", plan.Name, plan.Price, FormatDuration(plan.Days))
			callbackData := fmt.Sprintf("plan_%s", plan.ID)

			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
			))
		}
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_menu"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetSubscriptionsKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫
func GetSubscriptionsKeyboard(subscriptions []*core.Subscription) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	if len(subscriptions) == 0 {
		// –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "create_subscription"),
		))
	} else {
		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
		for _, sub := range subscriptions {
			buttonText := fmt.Sprintf("üìã %s", sub.GetDisplayName())
			callbackData := fmt.Sprintf("view_subscription_%s", sub.ID)

			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
			))
		}

		// –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "create_subscription"),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_profile"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetSubscriptionDetailKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
func GetSubscriptionDetailKeyboard(subscriptionID string) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", fmt.Sprintf("rename_subscription_%s", subscriptionID)),
			tgbotapi.NewInlineKeyboardButtonData("üìà –ü—Ä–æ–¥–ª–∏—Ç—å", fmt.Sprintf("extend_subscription_%s", subscriptionID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete_subscription_%s", subscriptionID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "my_subscriptions"),
		),
	)
}

// GetExtendSubscriptionKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetExtendSubscriptionKeyboard(subscriptionID string, plans []*core.Plan) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
	for _, plan := range plans {
		if plan.IsActive {
			buttonText := fmt.Sprintf("üì¶ +%s - %.0f‚ÇΩ", FormatDuration(plan.Days), plan.Price)
			callbackData := fmt.Sprintf("extend_plan_%s_sub_%s", plan.ID, subscriptionID)

			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
			))
		}
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("view_subscription_%s", subscriptionID)),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetCreateSubscriptionKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetCreateSubscriptionKeyboard(plans []*core.Plan) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
	for _, plan := range plans {
		if plan.IsActive {
			buttonText := fmt.Sprintf("üì¶ %s - %.0f‚ÇΩ (%s)", plan.Name, plan.Price, FormatDuration(plan.Days))
			callbackData := fmt.Sprintf("create_plan_%s", plan.ID)

			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
			))
		}
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "my_subscriptions"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetKeysKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏
func GetKeysKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîë WireGuard", "create_wireguard"),
			tgbotapi.NewInlineKeyboardButtonData("üîë Shadowsocks", "create_shadowsocks"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", "my_configs"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_profile"),
		),
	)
}

// GetReferralsKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
func GetReferralsKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "referral_stats"),
			tgbotapi.NewInlineKeyboardButtonData("üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", "my_referrals"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîó –ú–æ—è —Å—Å—ã–ª–∫–∞", "my_referral_link"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_profile"),
		),
	)
}

// ============================================================================
// –¢–ï–ö–°–¢–´
// ============================================================================

// GetWelcomeText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
func GetWelcomeText() string {
	return `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 3xui-bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üîê –°–æ–∑–¥–∞–≤–∞—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è!`
}

// GetProfileText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
func GetProfileText(user *core.User, isPremium bool, statusText, subUntilText string) string {
	text := "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
	text += fmt.Sprintf("üÜî ID: %d\n", user.TelegramID)
	text += fmt.Sprintf("üëã –ò–º—è: %s\n", user.GetDisplayName())
	text += fmt.Sprintf("üåê –Ø–∑—ã–∫: %s\n", user.LanguageCode)
	text += fmt.Sprintf("üìä –°—Ç–∞—Ç—É—Å: %s\n", statusText)

	if isPremium && subUntilText != "" {
		text += fmt.Sprintf("‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: %s\n", subUntilText)
	}

	return text
}

// GetPricingText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
func GetPricingText(plans []*core.Plan) string {
	text := "üí∞ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã\n\n"

	for _, plan := range plans {
		if plan.IsActive {
			text += fmt.Sprintf("üì¶ %s\n", plan.Name)
			text += fmt.Sprintf("   üíµ –¶–µ–Ω–∞: %.0f‚ÇΩ\n", plan.Price)
			text += fmt.Sprintf("   ‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n", FormatDuration(plan.Days))
			text += fmt.Sprintf("   üí∞ –¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å: %.2f‚ÇΩ\n", plan.GetPricePerDay())
			if plan.Description != "" {
				text += fmt.Sprintf("   üìù %s\n", plan.Description)
			}

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
			if discount := plan.GetDiscount(); discount > 0 {
				text += fmt.Sprintf("   üéØ –°–∫–∏–¥–∫–∞: %.0f%%\n", discount)
			}
			text += "\n"
		}
	}

	text += "üí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"

	return text
}

// GetSubscriptionsText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫
func GetSubscriptionsText(subscriptions []*core.Subscription) string {
	text := "üí≥ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"

	if len(subscriptions) == 0 {
		text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
		text += "üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN —Å–µ—Ä–≤–∏—Å–∞–º!"
	} else {
		for i, sub := range subscriptions {
			text += fmt.Sprintf("%d. üìã %s\n", i+1, sub.GetDisplayName())
			text += fmt.Sprintf("   üìä –°—Ç–∞—Ç—É—Å: %s\n", sub.GetStatusText())
			text += fmt.Sprintf("   üìÖ –ù–∞—á–∞–ª–æ: %s\n", sub.StartDate.Format("02.01.2006"))
			text += fmt.Sprintf("   üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: %s\n", sub.EndDate.Format("02.01.2006"))

			if sub.IsActive && !sub.IsExpired() {
				text += fmt.Sprintf("   ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: %d –¥–Ω–µ–π\n", sub.DaysRemaining())
			}
			text += "\n"
		}

		text += "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é!"
	}

	return text
}

// GetSubscriptionDetailText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
func GetSubscriptionDetailText(sub *core.Subscription) string {
	text := "üìã –î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
	text += fmt.Sprintf("üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", sub.GetDisplayName())
	text += fmt.Sprintf("üìä –°—Ç–∞—Ç—É—Å: %s\n", sub.GetStatusText())
	text += fmt.Sprintf("üìÖ –ù–∞—á–∞–ª–æ: %s\n", sub.StartDate.Format("02.01.2006 15:04"))
	text += fmt.Sprintf("üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: %s\n", sub.EndDate.Format("02.01.2006 15:04"))

	if sub.IsActive && !sub.IsExpired() {
		text += fmt.Sprintf("‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: %d –¥–Ω–µ–π\n", sub.DaysRemaining())
	}

	text += fmt.Sprintf("üÜî ID: %s\n", sub.ID)
	text += fmt.Sprintf("üìã –ü–ª–∞–Ω: %s\n", sub.PlanID)

	return text
}

// GetCreateSubscriptionText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetCreateSubscriptionText() string {
	return `‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.

üí° –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ VPN —Å–µ—Ä–≤–∏—Å–∞–º!`
}

// GetRenameSubscriptionText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetRenameSubscriptionText(sub *core.Subscription) string {
	return fmt.Sprintf(`‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: %s

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:`, sub.GetDisplayName())
}

// GetExtendSubscriptionText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetExtendSubscriptionText(sub *core.Subscription) string {
	text := fmt.Sprintf(`üìà –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

–ü–æ–¥–ø–∏—Å–∫–∞: %s
–¢–µ–∫—É—â–µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: %s

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:`,
		sub.GetDisplayName(),
		sub.EndDate.Format("02.01.2006"))

	return text
}

// GetDeleteSubscriptionText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetDeleteSubscriptionText(sub *core.Subscription) string {
	return fmt.Sprintf(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

–ü–æ–¥–ø–∏—Å–∫–∞: %s
–°—Ç–∞—Ç—É—Å: %s

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É?`,
		sub.GetDisplayName(),
		sub.GetStatusText())
}

// GetKeysText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏
func GetKeysText() string {
	return `üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–µ—Ä–≤–µ—Ä–∞–º

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`
}

// GetReferralsText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
func GetReferralsText() string {
	return `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!

üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º

üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã.`
}

// GetSupportText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
func GetSupportText() string {
	return `üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ:

üìß Email: support@3xui.com
üí¨ Telegram: @3xui_support
üåê –°–∞–π—Ç: https://3xui.com

‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 24 —á–∞—Å–æ–≤`
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

// FormatPrice —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É
func FormatPrice(price float64) string {
	return fmt.Sprintf("%.0f‚ÇΩ", price)
}

// FormatDuration —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
func FormatDuration(days int) string {
	if days >= 365 {
		years := days / 365
		remainingDays := days % 365
		if remainingDays == 0 {
			if years == 1 {
				return "1 –≥–æ–¥"
			}
			return fmt.Sprintf("%d –ª–µ—Ç", years)
		}
		if years == 1 {
			return fmt.Sprintf("1 –≥–æ–¥ %d –¥–Ω–µ–π", remainingDays)
		}
		return fmt.Sprintf("%d –ª–µ—Ç %d –¥–Ω–µ–π", years, remainingDays)
	} else if days >= 30 {
		months := days / 30
		remainingDays := days % 30
		if remainingDays == 0 {
			if months == 1 {
				return "1 –º–µ—Å—è—Ü"
			} else if months >= 2 && months <= 4 {
				return fmt.Sprintf("%d –º–µ—Å—è—Ü–∞", months)
			}
			return fmt.Sprintf("%d –º–µ—Å—è—Ü–µ–≤", months)
		}
		if months == 1 {
			return fmt.Sprintf("1 –º–µ—Å—è—Ü %d –¥–Ω–µ–π", remainingDays)
		} else if months >= 2 && months <= 4 {
			return fmt.Sprintf("%d –º–µ—Å—è—Ü–∞ %d –¥–Ω–µ–π", months, remainingDays)
		}
		return fmt.Sprintf("%d –º–µ—Å—è—Ü–µ–≤ %d –¥–Ω–µ–π", months, remainingDays)
	} else if days >= 7 {
		weeks := days / 7
		remainingDays := days % 7
		if remainingDays == 0 {
			if weeks == 1 {
				return "1 –Ω–µ–¥–µ–ª—è"
			} else if weeks >= 2 && weeks <= 4 {
				return fmt.Sprintf("%d –Ω–µ–¥–µ–ª–∏", weeks)
			}
			return fmt.Sprintf("%d –Ω–µ–¥–µ–ª—å", weeks)
		}
		if weeks == 1 {
			return fmt.Sprintf("1 –Ω–µ–¥–µ–ª—è %d –¥–Ω–µ–π", remainingDays)
		} else if weeks >= 2 && weeks <= 4 {
			return fmt.Sprintf("%d –Ω–µ–¥–µ–ª–∏ %d –¥–Ω–µ–π", weeks, remainingDays)
		}
		return fmt.Sprintf("%d –Ω–µ–¥–µ–ª—å %d –¥–Ω–µ–π", weeks, remainingDays)
	} else if days == 1 {
		return "1 –¥–µ–Ω—å"
	} else if days >= 2 && days <= 4 {
		return fmt.Sprintf("%d –¥–Ω—è", days)
	}
	return fmt.Sprintf("%d –¥–Ω–µ–π", days)
}

// TruncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func TruncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen-3] + "..."
}

// EscapeMarkdown —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
func EscapeMarkdown(text string) string {
	specialChars := []string{"_", "*", "[", "]", "(", ")", "~", "`", ">", "#", "+", "-", "=", "|", "{", "}", ".", "!"}

	for _, char := range specialChars {
		text = strings.ReplaceAll(text, char, "\\"+char)
	}

	return text
}
