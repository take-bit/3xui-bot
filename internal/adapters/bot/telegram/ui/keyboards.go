package ui

import (
	"fmt"
	"strings"
	"time"

	"3xui-bot/internal/core"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ============================================================================
// –ö–õ–ê–í–ò–ê–¢–£–†–´
// ============================================================================

// GetWelcomeKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func GetWelcomeKeyboard(hasTrialUsed bool) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç—Ä–∏–∞–ª
	if !hasTrialUsed {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéâ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø", "get_trial"),
		))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "open_pricing"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetMainMenuKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–æ—Å—Ç–æ–µ, –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
func GetMainMenuKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "open_pricing"),
			tgbotapi.NewInlineKeyboardButtonData("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "open_profile"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", "open_referrals"),
			tgbotapi.NewInlineKeyboardButtonData("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "show_instruction"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "open_support"),
		),
	)
}

// GetMainMenuWithProfileKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func GetMainMenuWithProfileKeyboard(isPremium bool) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–ª—é—á–∏ –±—É–¥—É—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–ø–∏—Å–æ–∫)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üí≥ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "my_subscriptions"),
	))

	// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "open_pricing"),
		tgbotapi.NewInlineKeyboardButtonData("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", "open_referrals"),
	))

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "show_instruction"),
		tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "open_support"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetProfileKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è (—É—Å—Ç–∞—Ä–µ–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –º–µ–Ω—é)
func GetProfileKeyboard(isPremium bool) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–ª—é—á–∏ –±—É–¥—É—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–ø–∏—Å–æ–∫)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üí≥ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "my_subscriptions"),
	))

	// –ö–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "open_referrals"),
		tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "open_support"),
	))

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_menu"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetPricingKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
func GetPricingKeyboard(plans []*core.Plan) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
	for _, plan := range plans {
		if plan.IsActive {
			buttonText := fmt.Sprintf("üì¶ %s - %.0f‚ÇΩ (%s)", plan.Name, plan.Price, FormatDuration(plan.Days))
			callbackData := fmt.Sprintf("select_plan_%s", plan.ID)

			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
			))
		}
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_menu"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetPaymentMethodKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
func GetPaymentMethodKeyboard(planID string) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ö–∞—Ä—Ç–æ–π", fmt.Sprintf("pay_card_%s", planID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè¶ –°–ë–ü", fmt.Sprintf("pay_sbp_%s", planID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíé Stars", fmt.Sprintf("pay_stars_%s", planID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_pricing"),
		),
	)
}

// GetSubscriptionsKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
func GetSubscriptionsKeyboard(subscriptions []*core.Subscription) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
	var activeSubscriptions []*core.Subscription
	for _, sub := range subscriptions {
		if sub.IsActive && !sub.IsExpired() {
			activeSubscriptions = append(activeSubscriptions, sub)
		}
	}

	if len(activeSubscriptions) == 0 {
		// –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "open_pricing"),
		))
	} else {
		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
		for _, sub := range activeSubscriptions {
			// –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å —ç–º–æ–¥–∑–∏ –∫–ª—é—á–∞)
			viewCallbackData := fmt.Sprintf("view_subscription_%s", sub.ID)
			viewButton := tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("üîë %s", sub.GetDisplayName()),
				viewCallbackData)
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(viewButton))
		}

		// –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "open_pricing"),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ (–∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "open_menu"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetSubscriptionDetailKeyboardOld –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
func GetSubscriptionDetailKeyboardOld(subscriptionID string) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", fmt.Sprintf("rename_subscription_%s", subscriptionID)),
			tgbotapi.NewInlineKeyboardButtonData("üìà –ü—Ä–æ–¥–ª–∏—Ç—å", fmt.Sprintf("extend_subscription_%s", subscriptionID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete_subscription_%s", subscriptionID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "my_subscriptions"),
		),
	)
}

// GetExtendSubscriptionKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetExtendSubscriptionKeyboard(subscriptionID string, plans []*core.Plan) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
	for _, plan := range plans {
		if plan.IsActive {
			buttonText := fmt.Sprintf("üì¶ +%s - %.0f‚ÇΩ", FormatDuration(plan.Days), plan.Price)
			callbackData := fmt.Sprintf("extend_plan_%s_sub_%s", plan.ID, subscriptionID)

			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
			))
		}
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("view_subscription_%s", subscriptionID)),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetCreateSubscriptionKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetCreateSubscriptionKeyboard(plans []*core.Plan) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
	for _, plan := range plans {
		if plan.IsActive {
			buttonText := fmt.Sprintf("üì¶ %s - %.0f‚ÇΩ (%s)", plan.Name, plan.Price, FormatDuration(plan.Days))
			callbackData := fmt.Sprintf("create_plan_%s", plan.ID)

			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
			))
		}
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "my_subscriptions"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetKeysKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏
func GetKeysKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîë WireGuard", "create_wireguard"),
			tgbotapi.NewInlineKeyboardButtonData("üîë Shadowsocks", "create_shadowsocks"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", "my_configs"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_profile"),
		),
	)
}

// GetReferralsKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
func GetReferralsKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "referral_stats"),
			tgbotapi.NewInlineKeyboardButtonData("üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", "my_referrals"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèÜ –†–µ–π—Ç–∏–Ω–≥", "referral_ranking"),
			tgbotapi.NewInlineKeyboardButtonData("üîó –ú–æ—è —Å—Å—ã–ª–∫–∞", "my_referral_link"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_menu"),
		),
	)
}

// ============================================================================
// –¢–ï–ö–°–¢–´
// ============================================================================

// GetWelcomeText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
func GetWelcomeText(firstName string, hasTrialUsed bool) string {
	greeting := fmt.Sprintf("üëã –ü—Ä–∏–≤–µ—Ç, %s!\n\n", firstName)

	text := greeting + `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üîê –°–æ–∑–¥–∞–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
`

	if !hasTrialUsed {
		text += "\nüéÅ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
	} else {
		text += "\nüí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
	}

	return text
}

// GetMainMenuText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func GetMainMenuText() string {
	return `üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:`
}

// GetMainMenuWithProfileText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func GetMainMenuWithProfileText(user *core.User, isPremium bool, statusText, subUntilText string) string {
	text := "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
	text += fmt.Sprintf("üÜî ID: %d\n", user.TelegramID)
	text += fmt.Sprintf("üëã –ò–º—è: %s\n", user.GetDisplayName())
	text += fmt.Sprintf("üåê –Ø–∑—ã–∫: %s\n", user.LanguageCode)
	text += fmt.Sprintf("üìä –°—Ç–∞—Ç—É—Å: %s\n", statusText)

	if isPremium && subUntilText != "" {
		text += fmt.Sprintf("‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: %s\n", subUntilText)
	}

	text += "\nüì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
	text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

	return text
}

// GetInstructionText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
func GetInstructionText() string {
	return `üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

üîπ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:
1. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É
2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
3. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
4. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

üîπ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:

üì± iOS:
‚Ä¢ Shadowrocket (–ø–ª–∞—Ç–Ω–æ)
‚Ä¢ FoXray (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)

ü§ñ Android:
‚Ä¢ v2rayNG (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
‚Ä¢ NekoBox (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)

üíª Windows:
‚Ä¢ v2rayN (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
‚Ä¢ Hiddify (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)

üçé macOS:
‚Ä¢ V2Box (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
‚Ä¢ FoXray (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)

üîπ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
2. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É
4. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"

üí° –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!`
}

// GetProfileText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
func GetProfileText(user *core.User, isPremium bool, statusText, subUntilText string) string {
	text := "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
	text += fmt.Sprintf("üÜî ID: %d\n", user.TelegramID)
	text += fmt.Sprintf("üëã –ò–º—è: %s\n", user.GetDisplayName())
	text += fmt.Sprintf("üåê –Ø–∑—ã–∫: %s\n", user.LanguageCode)
	text += fmt.Sprintf("üìä –°—Ç–∞—Ç—É—Å: %s\n", statusText)

	if isPremium && subUntilText != "" {
		text += fmt.Sprintf("‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: %s\n", subUntilText)
	}

	return text
}

// GetPricingText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
func GetPricingText(plans []*core.Plan) string {
	return "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:"
}

// GetPaymentMethodText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
func GetPaymentMethodText(plan *core.Plan) string {
	return fmt.Sprintf(`üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏

üì¶ –ü–ª–∞–Ω: %s
üíµ –°—É–º–º–∞: %.0f‚ÇΩ
‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`, plan.Name, plan.Price, FormatDuration(plan.Days))
}

// GetSubscriptionsText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–µ
func GetSubscriptionsText(subscriptions []*core.Subscription) string {
	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
	var activeSubscriptions []*core.Subscription
	for _, sub := range subscriptions {
		if sub.IsActive && !sub.IsExpired() {
			activeSubscriptions = append(activeSubscriptions, sub)
		}
	}

	text := "*üîë –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:*\n\n"

	if len(activeSubscriptions) == 0 {
		text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\\.\n\n"
		text += "üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN —Å–µ—Ä–≤–∏—Å–∞–º\\!"
	} else {
		for i, sub := range activeSubscriptions {
			// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
			displayName := EscapeMarkdownV2(sub.GetDisplayName())
			dateStr := EscapeMarkdownV2(sub.EndDate.Format("02.01.06, 15:04"))

			// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ü–∏—Ç–∞—Ç–µ —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–π –ø–æ–ª–æ—Å–æ–π
			text += fmt.Sprintf("> ‚Ä¢ %s \\(–¥–æ %s\\) ¬ª\n", displayName, dateStr)

			// –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
			if i < len(activeSubscriptions)-1 {
				text += "\n"
			}
		}
		text += "\n_–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –µ—é\\._"
	}

	return text
}

// EscapeMarkdownV2 —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
func EscapeMarkdownV2(text string) string {
	// –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
	replacer := strings.NewReplacer(
		"_", "\\_",
		"*", "\\*",
		"[", "\\[",
		"]", "\\]",
		"(", "\\(",
		")", "\\)",
		"~", "\\~",
		"`", "\\`",
		">", "\\>",
		"#", "\\#",
		"+", "\\+",
		"-", "\\-",
		"=", "\\=",
		"|", "\\|",
		"{", "\\{",
		"}", "\\}",
		".", "\\.",
		"!", "\\!",
	)
	return replacer.Replace(text)
}

// GetProfileTextWithQuotes –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –≤ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–µ
func GetProfileTextWithQuotes(user *core.User, subscriptionCount int) string {
	// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	displayName := EscapeMarkdownV2(user.GetDisplayName())

	text := fmt.Sprintf("–ü—Ä–æ—Ñ–∏–ª—å: %s\n\n", displayName)

	// –ü–µ—Ä–≤–∞—è —Ü–∏—Ç–∞—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø—Ä–æ—Ñ–∏–ª—è
	text += fmt.Sprintf("> \\-\\- ID: %d\n", user.TelegramID)
	text += fmt.Sprintf("> \\-\\- –ö\\-–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫: %d ¬ª\n\n", subscriptionCount)

	// –ö–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
	text += "üëâ –ù–∞—à –∫–∞–Ω–∞–ª üëà\n"
	text += "üëâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üëà\n\n"

	// –í—Ç–æ—Ä–∞—è —Ü–∏—Ç–∞—Ç–∞ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –¥—Ä—É–∑–µ–π
	text += "> _–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, –ø–æ–ª—É—á–∞–π –±–æ–ª—å—à–µ\\!_ ¬ª"

	return text
}

// GetProfileKeyboardWithQuotes –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
func GetProfileKeyboardWithQuotes() tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞—à –∫–∞–Ω–∞–ª"
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonURL("üëâ –ù–∞—à –∫–∞–Ω–∞–ª üëà", "https://t.me/your_channel"),
	))

	// –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonURL("üëâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üëà", "https://t.me/your_support"),
	))

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_menu"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetSubscriptionDetailTextOld –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func GetSubscriptionDetailTextOld(sub *core.Subscription) string {
	text := "üìã –î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
	text += fmt.Sprintf("üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", sub.GetDisplayName())
	text += fmt.Sprintf("üìä –°—Ç–∞—Ç—É—Å: %s\n", sub.GetStatusText())
	text += fmt.Sprintf("üìÖ –ù–∞—á–∞–ª–æ: %s\n", sub.StartDate.Format("02.01.2006 15:04"))
	text += fmt.Sprintf("üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: %s\n", sub.EndDate.Format("02.01.2006 15:04"))

	if sub.IsActive && !sub.IsExpired() {
		text += fmt.Sprintf("‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: %d –¥–Ω–µ–π\n", sub.DaysRemaining())
	}

	text += fmt.Sprintf("üÜî ID: %s\n", sub.ID)
	text += fmt.Sprintf("üìã –ü–ª–∞–Ω: %s\n", sub.PlanID)

	return text
}

// GetCreateSubscriptionText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetCreateSubscriptionText() string {
	return `‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.

üí° –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ VPN —Å–µ—Ä–≤–∏—Å–∞–º!`
}

// GetRenameSubscriptionText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetRenameSubscriptionText(sub *core.Subscription) string {
	return fmt.Sprintf(`‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: %s

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:`, sub.GetDisplayName())
}

// GetExtendSubscriptionText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetExtendSubscriptionText(sub *core.Subscription) string {
	text := fmt.Sprintf(`üìà –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

–ü–æ–¥–ø–∏—Å–∫–∞: %s
–¢–µ–∫—É—â–µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: %s

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:`,
		sub.GetDisplayName(),
		sub.EndDate.Format("02.01.2006"))

	return text
}

// GetDeleteSubscriptionText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func GetDeleteSubscriptionText(sub *core.Subscription) string {
	return fmt.Sprintf(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

–ü–æ–¥–ø–∏—Å–∫–∞: %s
–°—Ç–∞—Ç—É—Å: %s

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É?`,
		sub.GetDisplayName(),
		sub.GetStatusText())
}

// GetKeysText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏
func GetKeysText() string {
	return `üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–µ—Ä–≤–µ—Ä–∞–º

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`
}

// GetReferralsText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
func GetReferralsText() string {
	return `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!

üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º

üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã.`
}

// GetSupportText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
func GetSupportText() string {
	return `üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ:

üìß Email: support@3xui.com
üí¨ Telegram: @3xui_support
üåê –°–∞–π—Ç: https://3xui.com

‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 24 —á–∞—Å–æ–≤`
}

// GetReferralRankingText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
func GetReferralRankingText() string {
	return `üèÜ –†–µ–π—Ç–∏–Ω–≥ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ç–æ–ø –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ —Å–µ—Ä–≤–∏—Å.

–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:
–¢—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç.

üèÜ –¢–æ–ø-5 –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏—Ö:
1. 57956***** - 156 —á–µ–ª.
2. 80000***** - 105 —á–µ–ª.
3. 52587***** - 12 —á–µ–ª.
4. 63999***** - 7 —á–µ–ª.
5. 10149***** - 6 —á–µ–ª.`
}

// GetReferralRankingKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
func GetReferralRankingKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "open_menu"),
		),
	)
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

// FormatPrice —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É
func FormatPrice(price float64) string {
	return fmt.Sprintf("%.0f‚ÇΩ", price)
}

// FormatDuration —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
func FormatDuration(days int) string {
	if days >= 365 {
		years := days / 365
		remainingDays := days % 365
		if remainingDays == 0 {
			if years == 1 {
				return "1 –≥–æ–¥"
			}
			return fmt.Sprintf("%d –ª–µ—Ç", years)
		}
		if years == 1 {
			return fmt.Sprintf("1 –≥–æ–¥ %d –¥–Ω–µ–π", remainingDays)
		}
		return fmt.Sprintf("%d –ª–µ—Ç %d –¥–Ω–µ–π", years, remainingDays)
	} else if days >= 30 {
		months := days / 30
		remainingDays := days % 30
		if remainingDays == 0 {
			if months == 1 {
				return "1 –º–µ—Å—è—Ü"
			} else if months >= 2 && months <= 4 {
				return fmt.Sprintf("%d –º–µ—Å—è—Ü–∞", months)
			}
			return fmt.Sprintf("%d –º–µ—Å—è—Ü–µ–≤", months)
		}
		if months == 1 {
			return fmt.Sprintf("1 –º–µ—Å—è—Ü %d –¥–Ω–µ–π", remainingDays)
		} else if months >= 2 && months <= 4 {
			return fmt.Sprintf("%d –º–µ—Å—è—Ü–∞ %d –¥–Ω–µ–π", months, remainingDays)
		}
		return fmt.Sprintf("%d –º–µ—Å—è—Ü–µ–≤ %d –¥–Ω–µ–π", months, remainingDays)
	} else if days >= 7 {
		weeks := days / 7
		remainingDays := days % 7
		if remainingDays == 0 {
			if weeks == 1 {
				return "1 –Ω–µ–¥–µ–ª—è"
			} else if weeks >= 2 && weeks <= 4 {
				return fmt.Sprintf("%d –Ω–µ–¥–µ–ª–∏", weeks)
			}
			return fmt.Sprintf("%d –Ω–µ–¥–µ–ª—å", weeks)
		}
		if weeks == 1 {
			return fmt.Sprintf("1 –Ω–µ–¥–µ–ª—è %d –¥–Ω–µ–π", remainingDays)
		} else if weeks >= 2 && weeks <= 4 {
			return fmt.Sprintf("%d –Ω–µ–¥–µ–ª–∏ %d –¥–Ω–µ–π", weeks, remainingDays)
		}
		return fmt.Sprintf("%d –Ω–µ–¥–µ–ª—å %d –¥–Ω–µ–π", weeks, remainingDays)
	} else if days == 1 {
		return "1 –¥–µ–Ω—å"
	} else if days >= 2 && days <= 4 {
		return fmt.Sprintf("%d –¥–Ω—è", days)
	}
	return fmt.Sprintf("%d –¥–Ω–µ–π", days)
}

// TruncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func TruncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen-3] + "..."
}

// EscapeMarkdown —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
func EscapeMarkdown(text string) string {
	specialChars := []string{"_", "*", "[", "]", "(", ")", "~", "`", ">", "#", "+", "-", "=", "|", "{", "}", ".", "!"}

	for _, char := range specialChars {
		text = strings.ReplaceAll(text, char, "\\"+char)
	}

	return text
}

// GetSubscriptionDetailText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ —Å VPN –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –≤ MarkdownV2
func GetSubscriptionDetailText(subscription *core.Subscription, plan *core.Plan, vpnConfigs []*core.VPNConnection) string {
	var text strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	text.WriteString("*üìã –î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n")

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ –≤ —Ü–∏—Ç–∞—Ç–µ
	planName := EscapeMarkdownV2(plan.Name)
	text.WriteString(fmt.Sprintf("> üì¶ *–ü–ª–∞–Ω:* %s\n", planName))
	text.WriteString(fmt.Sprintf("> üí∞ *–¶–µ–Ω–∞:* %.0f‚ÇΩ\n", plan.Price))
	text.WriteString(fmt.Sprintf("> ‚è∞ *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* %d –¥–Ω–µ–π ¬ª\n\n", plan.Days))

	// –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
	if subscription.IsActive {
		text.WriteString("‚úÖ *–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞\n")
		endDate := EscapeMarkdownV2(subscription.EndDate.Format("02.01.06, 15:04"))
		text.WriteString(fmt.Sprintf("üìÖ *–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ:* %s\n", endDate))
	} else {
		text.WriteString("‚ùå *–°—Ç–∞—Ç—É—Å:* –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n")
	}

	startDate := EscapeMarkdownV2(subscription.StartDate.Format("02.01.06"))
	text.WriteString(fmt.Sprintf("üìÖ *–°–æ–∑–¥–∞–Ω–∞:* %s\n\n", startDate))

	// URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞)
	if subscription.IsActive {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π)
		connectionURL := fmt.Sprintf("https://3xui.com/connect/%s", subscription.ID)
		text.WriteString("*üîó URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n")
		text.WriteString(fmt.Sprintf("`%s`", connectionURL))
	}

	return text.String()
}

// GetSubscriptionDetailKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
func GetSubscriptionDetailKeyboard(subscription *core.Subscription, vpnConfigs []*core.VPNConnection) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é (–µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞)
	if subscription.IsActive {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", fmt.Sprintf("connection_guide_%s", subscription.ID)),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", fmt.Sprintf("rename_subscription_%s", subscription.ID)),
	))

	// –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞)
	if subscription.IsActive {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", fmt.Sprintf("extend_subscription_%s", subscription.ID)),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º", "my_subscriptions"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetVPNConfigDetailText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func GetVPNConfigDetailText(config *core.VPNConnection) string {
	var text strings.Builder

	text.WriteString("üîë –î–µ—Ç–∞–ª–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n")
	text.WriteString(fmt.Sprintf("üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", config.Name))
	text.WriteString(fmt.Sprintf("üîê Username: %s\n", config.MarzbanUsername))
	text.WriteString(fmt.Sprintf("üìä –°—Ç–∞—Ç—É—Å: %s\n", config.Status))

	if config.ExpireAt != nil {
		text.WriteString(fmt.Sprintf("‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: %s\n", config.ExpireAt.Format("02.01.2006 15:04")))

		// –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
		remaining := time.Until(*config.ExpireAt)
		if remaining > 0 {
			days := int(remaining.Hours() / 24)
			hours := int(remaining.Hours()) % 24
			text.WriteString(fmt.Sprintf("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: %d –¥–Ω–µ–π %d —á–∞—Å–æ–≤\n", days, hours))
		}
	}

	if config.DataLimitBytes != nil && *config.DataLimitBytes > 0 {
		dataLimitGB := float64(*config.DataLimitBytes) / (1024 * 1024 * 1024)
		text.WriteString(fmt.Sprintf("üíæ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: %.1f GB\n", dataLimitGB))

		if config.DataUsedBytes != nil {
			dataUsedGB := float64(*config.DataUsedBytes) / (1024 * 1024 * 1024)
			dataRemainingGB := dataLimitGB - dataUsedGB
			usagePercent := (dataUsedGB / dataLimitGB) * 100

			text.WriteString(fmt.Sprintf("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %.2f GB (%.1f%%)\n", dataUsedGB, usagePercent))
			text.WriteString(fmt.Sprintf("üìâ –û—Å—Ç–∞–ª–æ—Å—å: %.2f GB\n", dataRemainingGB))
		}
	}

	text.WriteString(fmt.Sprintf("\nüìÖ –°–æ–∑–¥–∞–Ω–æ: %s\n", config.CreatedAt.Format("02.01.2006 15:04")))
	text.WriteString(fmt.Sprintf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: %s\n", config.UpdatedAt.Format("02.01.2006 15:04")))

	text.WriteString("\n–ù–∞–∂–º–∏—Ç–µ \"–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

	return text.String()
}

// GetVPNConfigDetailKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func GetVPNConfigDetailKeyboard(config *core.VPNConnection) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", fmt.Sprintf("get_vpn_key_%s", config.ID)),
	))

	// –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", fmt.Sprintf("rename_config_%s", config.ID)),
	))

	// –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫)
	if !config.IsActive || config.IsExpired() {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete_config_%s", config.ID)),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ (–Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å subscription_id - –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "my_subscriptions"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetUnknownCommandText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
func GetUnknownCommandText() string {
	return `ü§ñ –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

‚ùì –£ –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏?
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.

üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
–í—Å—ë, —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –≤–∞—à–µ–≥–æ VPN ‚Äî —Ç–∞—Ä–∏—Ñ—ã, –ø—Ä–æ–¥–ª–µ–Ω–∏—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ üëá`
}

// GetUnknownCommandKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
func GetUnknownCommandKeyboard() tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonURL("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "https://t.me/your_support_chat"),
	))

	// –ö–Ω–æ–ø–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "open_menu"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// GetCancelKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
func GetCancelKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "my_subscriptions"),
		),
	)
}

// GetBackToPricingKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–∞—Ä–∏—Ñ–∞–º
func GetBackToPricingKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", "open_pricing"),
		),
	)
}
