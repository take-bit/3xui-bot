package telegram

import (
	"context"
	"log"

	"3xui-bot/internal/adapters/bot/telegram/handlers"
	"3xui-bot/internal/usecase"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Router –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è Telegram –±–æ—Ç–∞
type Router struct {
	bot *tgbotapi.BotAPI

	// Use cases
	userUC     *usecase.UserUseCase
	subUC      *usecase.SubscriptionUseCase
	paymentUC  *usecase.PaymentUseCase
	vpnUC      *usecase.VPNUseCase
	referralUC *usecase.ReferralUseCase
	notifUC    *usecase.NotificationUseCase

	// Handlers
	startHandler    *handlers.StartHandler
	callbackHandler *handlers.CallbackHandler
	paymentHandler  *handlers.PaymentHandler
	vpnHandler      *handlers.VPNHandler
}

// NewRouter —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä
func NewRouter(
	bot *tgbotapi.BotAPI,
	userUC *usecase.UserUseCase,
	subUC *usecase.SubscriptionUseCase,
	paymentUC *usecase.PaymentUseCase,
	vpnUC *usecase.VPNUseCase,
	referralUC *usecase.ReferralUseCase,
	notifUC *usecase.NotificationUseCase,
) *Router {
	r := &Router{
		bot:        bot,
		userUC:     userUC,
		subUC:      subUC,
		paymentUC:  paymentUC,
		vpnUC:      vpnUC,
		referralUC: referralUC,
		notifUC:    notifUC,
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º handlers
	r.paymentHandler = handlers.NewPaymentHandler(bot, paymentUC)
	r.vpnHandler = handlers.NewVPNHandler(bot, vpnUC)

	return r
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
func (r *Router) HandleUpdate(ctx context.Context, update tgbotapi.Update) error {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	if update.Message != nil && update.Message.IsCommand() {
		return r.handleCommand(ctx, update.Message)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
	if update.CallbackQuery != nil {
		return r.handleCallback(ctx, update.CallbackQuery)
	}

	return nil
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (r *Router) handleCommand(ctx context.Context, message *tgbotapi.Message) error {
	switch message.Command() {
	case "start":
		return r.handleStart(ctx, message)
	case "help":
		return r.handleHelp(ctx, message)
	case "vpn":
		return r.vpnHandler.HandleShowVPNs(ctx, message.From.ID, message.Chat.ID)
	default:
		return nil
	}
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback queries
func (r *Router) handleCallback(ctx context.Context, callback *tgbotapi.CallbackQuery) error {
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ callback
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
	log.Printf("Callback: %s from user %d", callback.Data, callback.From.ID)
	return nil
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (r *Router) handleStart(ctx context.Context, message *tgbotapi.Message) error {
	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ handlers.StartHandler

	msg := tgbotapi.NewMessage(message.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!")
	_, err := r.bot.Send(msg)
	return err
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (r *Router) handleHelp(ctx context.Context, message *tgbotapi.Message) error {
	helpText := "üìñ *–ü–æ–º–æ—â—å*\n\n" +
		"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
		"/vpn - –ú–æ–∏ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n" +
		"/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"

	msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
	msg.ParseMode = "Markdown"
	_, err := r.bot.Send(msg)
	return err
}
