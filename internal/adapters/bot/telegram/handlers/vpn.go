package handlers

import (
	"context"
	"fmt"
	"log"
	"strings"

	"3xui-bot/internal/usecase"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// VPNHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
type VPNHandler struct {
	bot   *tgbotapi.BotAPI
	vpnUC *usecase.VPNUseCase
}

// NewVPNHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ VPN
func NewVPNHandler(
	bot *tgbotapi.BotAPI,
	vpnUC *usecase.VPNUseCase,
) *VPNHandler {
	return &VPNHandler{
		bot:   bot,
		vpnUC: vpnUC,
	}
}

// HandleShowVPNs –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *VPNHandler) HandleShowVPNs(ctx context.Context, userID int64, chatID int64) error {
	log.Printf("Showing VPNs for user %d", userID)

	// –ü–æ–ª—É—á–∞–µ–º VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Marzban —á–µ—Ä–µ–∑ UseCase
	vpns, err := h.vpnUC.GetUserVPNWithStats(ctx, userID)
	if err != nil {
		return fmt.Errorf("failed to get VPNs: %w", err)
	}

	if len(vpns) == 0 {
		msg := tgbotapi.NewMessage(chatID,
			"üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.\n\n"+
				"–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN.",
		)
		h.bot.Send(msg)
		return nil
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º VPN
	var message strings.Builder
	message.WriteString("üîê *–í–∞—à–∏ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n\n")

	for i, vpn := range vpns {
		statusEmoji := "‚úÖ"
		if !vpn.IsActive || vpn.Status != "active" {
			statusEmoji = "‚ùå"
		}

		message.WriteString(fmt.Sprintf(
			"%d. %s *%s*\n"+
				"   –°—Ç–∞—Ç—É—Å: %s %s\n"+
				"   Username: `%s`\n",
			i+1,
			statusEmoji,
			vpn.Name,
			statusEmoji,
			vpn.Status,
			vpn.MarzbanUsername,
		))

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
		if vpn.DataLimitBytes != nil && *vpn.DataLimitBytes > 0 {
			usedGB := float64(*vpn.DataUsedBytes) / (1024 * 1024 * 1024)
			limitGB := float64(*vpn.DataLimitBytes) / (1024 * 1024 * 1024)
			message.WriteString(fmt.Sprintf("   –¢—Ä–∞—Ñ–∏–∫: %.2f / %.2f GB\n", usedGB, limitGB))
		}

		if vpn.ExpireAt != nil {
			message.WriteString(fmt.Sprintf("   –ò—Å—Ç–µ–∫–∞–µ—Ç: %s\n", vpn.ExpireAt.Format("02.01.2006 15:04")))
		}

		message.WriteString("\n")
	}

	message.WriteString("–í—ã–±–µ—Ä–∏—Ç–µ VPN –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, vpn := range vpns {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("üì• %s", vpn.Name),
				fmt.Sprintf("vpn_config_%s", vpn.ID),
			),
		)
		rows = append(rows, row)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msg := tgbotapi.NewMessage(chatID, message.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("failed to send message: %w", err)
	}

	return nil
}

// HandleGetVPNConfig –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN
func (h *VPNHandler) HandleGetVPNConfig(ctx context.Context, userID int64, chatID int64, vpnID string) error {
	log.Printf("Getting VPN config %s for user %d", vpnID, userID)

	// –ü–æ–ª—É—á–∞–µ–º VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ UseCase
	vpn, err := h.vpnUC.GetVPNConnectionWithStats(ctx, vpnID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "‚ùå VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
		h.bot.Send(msg)
		return fmt.Errorf("failed to get VPN: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ VPN –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if vpn.TelegramUserID != userID {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
		h.bot.Send(msg)
		return fmt.Errorf("unauthorized access to VPN")
	}

	// TODO: –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö Marzban
	// –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏

	configText := fmt.Sprintf(
		"üîê *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VPN: %s*\n\n"+
			"Username: `%s`\n"+
			"–°—Ç–∞—Ç—É—Å: %s\n\n"+
			"üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:*\n"+
			"1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ VPN –∫–ª–∏–µ–Ω—Ç–∞\n"+
			"2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"+
			"3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É\n\n"+
			"‚ö†Ô∏è –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å –¥—Ä—É–≥–∏–º–∏!",
		vpn.Name,
		vpn.MarzbanUsername,
		vpn.Status,
	)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", fmt.Sprintf("vpn_stats_%s", vpn.ID)),
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", fmt.Sprintf("vpn_refresh_%s", vpn.ID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "vpn_list"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, configText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("failed to send message: %w", err)
	}

	return nil
}

// HandleVPNStats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É VPN
func (h *VPNHandler) HandleVPNStats(ctx context.Context, userID int64, chatID int64, messageID int, vpnID string) error {
	log.Printf("Showing stats for VPN %s", vpnID)

	// –ü–æ–ª—É—á–∞–µ–º VPN —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ UseCase
	vpn, err := h.vpnUC.GetVPNConnectionWithStats(ctx, vpnID)
	if err != nil {
		return fmt.Errorf("failed to get VPN: %w", err)
	}

	usedGB := 0.0
	limitGB := 0.0
	if vpn.DataUsedBytes != nil {
		usedGB = float64(*vpn.DataUsedBytes) / (1024 * 1024 * 1024)
	}
	if vpn.DataLimitBytes != nil {
		limitGB = float64(*vpn.DataLimitBytes) / (1024 * 1024 * 1024)
	}
	usagePercent := 0.0
	if limitGB > 0 {
		usagePercent = (usedGB / limitGB) * 100
	}

	statsText := fmt.Sprintf(
		"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VPN: %s*\n\n"+
			"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %.2f GB / %.2f GB (%.1f%%)\n"+
			"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: %s\n"+
			"‚úÖ –°—Ç–∞—Ç—É—Å: %s\n\n"+
			"–û–±–Ω–æ–≤–ª–µ–Ω–æ: %s",
		vpn.Name,
		usedGB,
		limitGB,
		usagePercent,
		vpn.ExpireAt.Format("02.01.2006 15:04"),
		vpn.Status,
		vpn.UpdatedAt.Format("02.01.2006 15:04"),
	)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, statsText)
	editMsg.ParseMode = "Markdown"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", fmt.Sprintf("vpn_stats_%s", vpnID)),
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("vpn_config_%s", vpnID)),
		),
	)
	editMsg.ReplyMarkup = &keyboard

	if _, err := h.bot.Send(editMsg); err != nil {
		return fmt.Errorf("failed to update message: %w", err)
	}

	return nil
}

// HandleVPNRefresh –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ VPN –∏–∑ Marzban
func (h *VPNHandler) HandleVPNRefresh(ctx context.Context, userID int64, chatID int64, messageID int, vpnID string) error {
	log.Printf("Refreshing VPN %s", vpnID)

	// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Marzban —á–µ—Ä–µ–∑ UseCase
	if err := h.vpnUC.SyncVPNStatus(ctx, vpnID); err != nil {
		return fmt.Errorf("failed to sync VPN: %w", err)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	return h.HandleGetVPNConfig(ctx, userID, chatID, vpnID)
}
