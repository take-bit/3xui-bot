package handlers

import (
	"log/slog"
	"context"
	"fmt"

	"3xui-bot/internal/usecase"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// PaymentHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
type PaymentHandler struct {
	bot       *tgbotapi.BotAPI
	paymentUC *usecase.PaymentUseCase
}

// NewPaymentHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
func NewPaymentHandler(
	bot *tgbotapi.BotAPI,
	paymentUC *usecase.PaymentUseCase,
) *PaymentHandler {
	return &PaymentHandler{
		bot:       bot,
		paymentUC: paymentUC,
	}
}

// HandleSelectPlan –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
func (h *PaymentHandler) HandleSelectPlan(ctx context.Context, userID int64, chatID int64, planID string) error {
	slog.Info("User %d selected plan %s", userID, planID)

	// –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ UseCase
	payment, paymentURL, err := h.paymentUC.CreatePaymentForPlan(ctx, userID, planID)
	if err != nil {
		return fmt.Errorf("failed to create payment: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
	message := fmt.Sprintf(
		"üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"+
			"–°—É–º–º–∞: %.2f ‚ÇΩ\n"+
			"ID –ø–ª–∞—Ç–µ–∂–∞: %s\n\n"+
			"‚ö†Ô∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"+
			"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
		payment.Amount,
		payment.ID,
	)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", paymentURL),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", fmt.Sprintf("payment_check_%s", payment.ID)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", fmt.Sprintf("payment_cancel_%s", payment.ID)),
		),
	)

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("failed to send message: %w", err)
	}

	return nil
}

// HandlePaymentCheck –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
func (h *PaymentHandler) HandlePaymentCheck(ctx context.Context, userID int64, chatID int64, messageID int, paymentID string, planID string) error {
	slog.Info("Checking payment %s for user %d", paymentID, userID)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ UseCase (–≤—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏)
	if err := h.paymentUC.ProcessPaymentSuccess(ctx, paymentID, planID); err != nil {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return fmt.Errorf("failed to process payment: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.bot.Send(deleteMsg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	successMsg := tgbotapi.NewMessage(chatID,
		"‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*\n\n"+
			"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"+
			"VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ.\n\n"+
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vpn –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
	)
	successMsg.ParseMode = "Markdown"

	if _, err := h.bot.Send(successMsg); err != nil {
		return fmt.Errorf("failed to send success message: %w", err)
	}

	return nil
}

// HandlePaymentCancel –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞
func (h *PaymentHandler) HandlePaymentCancel(ctx context.Context, userID int64, chatID int64, messageID int, paymentID string) error {
	slog.Info("Cancelling payment %s for user %d", paymentID, userID)

	// –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ UseCase
	if err := h.paymentUC.ProcessPaymentCancellation(ctx, paymentID); err != nil {
		return fmt.Errorf("failed to cancel payment: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞—Ç–µ–∂–æ–º
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.bot.Send(deleteMsg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
	msg := tgbotapi.NewMessage(chatID, "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.")
	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("failed to send message: %w", err)
	}

	return nil
}

// HandlePaymentWebhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å HTTP endpoint –¥–ª—è webhook
func (h *PaymentHandler) HandlePaymentWebhook(ctx context.Context, paymentID string, planID string, status string) error {
	slog.Info("Received webhook for payment %s with status %s", paymentID, status)

	switch status {
	case "succeeded", "completed":
		return h.paymentUC.ProcessPaymentSuccess(ctx, paymentID, planID)
	case "failed":
		return h.paymentUC.ProcessPaymentFailure(ctx, paymentID)
	case "cancelled", "canceled":
		return h.paymentUC.ProcessPaymentCancellation(ctx, paymentID)
	default:
		slog.Info("Unknown payment status: %s", status)
		return nil
	}
}
