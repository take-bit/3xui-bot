package callbacks

import (
	"context"
	"log/slog"
	"time"

	"3xui-bot/internal/adapters/bot/telegram/ui"
	"3xui-bot/internal/core"
	"3xui-bot/internal/usecase"
)

// HandleGetTrial handles the get_trial callback
func (h *BaseHandler) HandleGetTrial(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling get trial", "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.getUser(ctx, userID)
	if err != nil {
		h.logError(err, "GetUser")
		return err
	}

	// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø
	success, err := h.activateTrial(ctx, userID)
	if err != nil {
		h.logError(err, "ActivateTrial")
		return err
	}

	var text string
	if success {
		text = "üéâ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 –¥–Ω—è!"

		// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
		err = h.createTrialSubscription(ctx, userID)
		if err != nil {
			h.logError(err, "CreateTrialSubscription")
			// –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç.–∫. –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º user.HasTrial –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		user.HasTrial = true
	} else {
		text = "‚ùå –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
	}

	keyboard := ui.GetWelcomeKeyboard(user.HasTrial)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º deleteAndSendMessage, —Ç.–∫. –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å —Ñ–æ—Ç–æ
	return h.msg.DeleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

// createTrialSubscription —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –¥–Ω—è
func (h *BaseHandler) createTrialSubscription(ctx context.Context, userID int64) error {
	now := time.Now()
	dto := usecase.CreateSubscriptionDTO{
		UserID:    userID,
		Name:      "–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
		PlanID:    "trial", // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
		Days:      3,       // 3 –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
		StartDate: now,
		EndDate:   now.AddDate(0, 0, 3),
		IsActive:  true,
	}

	subscription, err := h.createSubscription(ctx, dto)
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º VPN –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
	if sub, ok := subscription.(*core.Subscription); ok && sub != nil {
		_, err = h.createVPNForSubscription(ctx, userID, sub.ID)
		if err != nil {
			// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
			slog.Error("Failed to create VPN for trial subscription", "error", err)
		}
	}

	return nil
}
