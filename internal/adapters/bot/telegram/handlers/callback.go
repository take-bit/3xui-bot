package handlers

import (
	"context"
	"fmt"
	"log/slog"

	"3xui-bot/internal/adapters/bot/telegram/ui"
	"3xui-bot/internal/core"
	"3xui-bot/internal/ports"
	"3xui-bot/internal/usecase"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// CallbackHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback query
type CallbackHandler struct {
	userUC *usecase.UserUseCase
	subUC  *usecase.SubscriptionUseCase
	vpnUC  *usecase.VPNUseCase
	bot    ports.BotPort
	log    *slog.Logger
	route  map[string]func(context.Context, meta) error
}

// meta —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ callback query
type meta struct {
	userID    int64
	chatID    int64
	messageID int
	cbID      string
	data      string
}

// NewCallbackHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
func NewCallbackHandler(
	userUC *usecase.UserUseCase,
	subUC *usecase.SubscriptionUseCase,
	vpnUC *usecase.VPNUseCase,
	bot ports.BotPort,
	log *slog.Logger,
) *CallbackHandler {
	h := &CallbackHandler{
		userUC: userUC,
		subUC:  subUC,
		vpnUC:  vpnUC,
		bot:    bot,
		log:    log,
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö (–Ω–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö) callback'–æ–≤
	h.route = map[string]func(context.Context, meta) error{
		"get_trial":           h.handleGetTrial,
		"open_menu":           h.handleOpenMenu,
		"open_profile":        h.handleOpenProfile,
		"open_pricing":        h.handleOpenPricing,
		"my_subscriptions":    h.handleMySubscriptions,
		"create_subscription": h.handleCreateSubscription,
		"open_keys":           h.handleOpenKeys,
		"open_referrals":      h.handleOpenReferrals,
		"open_support":        h.handleOpenSupport,
		"my_configs":          h.handleMyConfigs,
		"referral_stats":      h.handleReferralStats,
		"my_referrals":        h.handleMyReferrals,
		"my_referral_link":    h.handleMyReferralLink,
		"create_wireguard":    h.handleCreateWireguard,
		"create_shadowsocks":  h.handleCreateShadowsocks,
	}

	return h
}

// CanHandle –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
func (h *CallbackHandler) CanHandle(update tgbotapi.Update) bool {
	return update.CallbackQuery != nil
}

// Handle –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query
func (h *CallbackHandler) Handle(ctx context.Context, upd tgbotapi.Update) error {
	cb := upd.CallbackQuery
	if cb == nil {
		return nil
	}

	m := meta{
		userID:    cb.From.ID,
		chatID:    cb.Message.Chat.ID,
		messageID: cb.Message.MessageID,
		cbID:      cb.ID,
		data:      cb.Data,
	}

	h.info("Handling callback", "data", m.data, "user_id", m.userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ä–æ—É—Ç—ã
	if fn, ok := h.route[m.data]; ok {
		return fn(ctx, m)
	}

	// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏
	if planID, ok := ui.ParsePlanCallback(m.data); ok {
		return h.handlePlanSelection(ctx, m, planID)
	}
	if planID, ok := ui.ParseSelectPlanCallback(m.data); ok {
		return h.handlePlanSelection(ctx, m, planID)
	}
	if planID, ok := ui.ParseCreatePlanCallback(m.data); ok {
		return h.handleCreateSubscriptionByPlan(ctx, m, planID)
	}
	if subID, ok := ui.ParseViewSubscriptionCallback(m.data); ok {
		return h.handleViewSubscription(ctx, m, subID)
	}
	if subID, ok := ui.ParseRenameSubscriptionCallback(m.data); ok {
		return h.handleRenameSubscription(ctx, m, subID)
	}
	if subID, ok := ui.ParseExtendSubscriptionCallback(m.data); ok {
		return h.handleExtendSubscription(ctx, m, subID)
	}
	if subID, ok := ui.ParseDeleteSubscriptionCallback(m.data); ok {
		return h.handleDeleteSubscription(ctx, m, subID)
	}
	if planID, subID, ok := ui.ParseExtendPlanCallback(m.data); ok {
		return h.handleExtendSubscriptionByPlan(ctx, m, planID, subID)
	}
	if planID, ok := ui.ParsePayCardCallback(m.data); ok {
		return h.handlePayCard(ctx, m, planID)
	}
	if planID, ok := ui.ParsePaySBPCallback(m.data); ok {
		return h.handlePaySBP(ctx, m, planID)
	}
	if planID, ok := ui.ParsePayStarsCallback(m.data); ok {
		return h.handlePayStars(ctx, m, planID)
	}
	if configID, ok := ui.ParseViewConfigCallback(m.data); ok {
		return h.handleViewConfig(ctx, m, configID)
	}
	if subID, ok := ui.ParseConnectionGuideCallback(m.data); ok {
		return h.handleConnectionGuide(ctx, m, subID)
	}

	// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
	h.warn("Unknown callback", "data", m.data)
	return h.bot.Edit(ctx, m.chatID, m.messageID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", ui.GetUnknownCommandKeyboard())
}

// ============================================================================
// –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
// ============================================================================

func (h *CallbackHandler) handleGetTrial(ctx context.Context, m meta) error {
	h.info("Handle get trial", "user_id", m.userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.userUC.GetUser(ctx, m.userID)
	if err != nil || user == nil {
		h.err("GetUser", err)
		return err
	}

	// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø
	success, err := h.userUC.ActivateTrial(ctx, m.userID)
	if err != nil {
		h.err("ActivateTrial", err)
		return err
	}

	var text string
	if success {
		text = "üéâ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 –¥–Ω—è!"
	} else {
		text = "‚ùå –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
	}

	return h.bot.Edit(ctx, m.chatID, m.messageID, text, ui.GetWelcomeKeyboard(user.HasTrial))
}

func (h *CallbackHandler) handleOpenMenu(ctx context.Context, m meta) error {
	h.info("Handle open menu", "user_id", m.userID)

	user, err := h.userUC.GetUser(ctx, m.userID)
	if err != nil || user == nil {
		h.err("GetUser", err)
		return err
	}

	return h.bot.Edit(ctx, m.chatID, m.messageID, ui.GetWelcomeText(user.FirstName, user.HasTrial), ui.GetWelcomeKeyboard(user.HasTrial))
}

func (h *CallbackHandler) handleOpenProfile(ctx context.Context, m meta) error {
	h.info("Handle open profile", "user_id", m.userID)

	user, err := h.userUC.GetUser(ctx, m.userID)
	if err != nil || user == nil {
		h.err("GetUser", err)
		return err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
	subscriptions, _ := h.subUC.GetUserSubscriptions(ctx, m.userID)
	isPremium := false
	statusText := "Free"
	subUntilText := "‚Äî"

	if len(subscriptions) > 0 {
		for _, sub := range subscriptions {
			if sub.IsActive {
				isPremium = true
				statusText = "Premium"
				subUntilText = sub.EndDate.Format("02.01.2006")
				break
			}
		}
	}

	text := ui.GetProfileText(user, isPremium, statusText, subUntilText)
	keyboard := ui.GetProfileKeyboard(isPremium)
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, keyboard)
}

func (h *CallbackHandler) handleOpenPricing(ctx context.Context, m meta) error {
	h.info("Handle open pricing", "user_id", m.userID)

	plans, err := h.subUC.GetPlans(ctx)
	if err != nil {
		h.err("GetPlans", err)
		return err
	}

	return h.bot.Edit(ctx, m.chatID, m.messageID, ui.GetPricingText(plans), ui.GetPricingKeyboard(plans))
}

func (h *CallbackHandler) handleMySubscriptions(ctx context.Context, m meta) error {
	h.info("Handle my subscriptions", "user_id", m.userID)

	subscriptions, err := h.subUC.GetUserSubscriptions(ctx, m.userID)
	if err != nil {
		h.err("GetUserSubscriptions", err)
		return err
	}

	return h.bot.Edit(ctx, m.chatID, m.messageID, ui.GetSubscriptionsText(subscriptions), ui.GetSubscriptionsKeyboard(subscriptions))
}

func (h *CallbackHandler) handleCreateSubscription(ctx context.Context, m meta) error {
	h.info("Handle create subscription", "user_id", m.userID)

	plans, err := h.subUC.GetPlans(ctx)
	if err != nil {
		h.err("GetPlans", err)
		return err
	}

	text := ui.GetCreateSubscriptionText()
	keyboard := ui.GetCreateSubscriptionKeyboard(plans)
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, keyboard)
}

func (h *CallbackHandler) handleOpenKeys(ctx context.Context, m meta) error {
	h.info("Handle open keys", "user_id", m.userID)
	return h.bot.Edit(ctx, m.chatID, m.messageID, ui.GetKeysText(), ui.GetKeysKeyboard())
}

func (h *CallbackHandler) handleOpenReferrals(ctx context.Context, m meta) error {
	h.info("Handle open referrals", "user_id", m.userID)
	return h.bot.Edit(ctx, m.chatID, m.messageID, ui.GetReferralsText(), ui.GetReferralsKeyboard())
}

func (h *CallbackHandler) handleOpenSupport(ctx context.Context, m meta) error {
	h.info("Handle open support", "user_id", m.userID)

	user, err := h.userUC.GetUser(ctx, m.userID)
	if err != nil || user == nil {
		h.err("GetUser", err)
		return err
	}

	return h.bot.Edit(ctx, m.chatID, m.messageID, ui.GetSupportText(), ui.GetWelcomeKeyboard(user.HasTrial))
}

func (h *CallbackHandler) handleMyConfigs(ctx context.Context, m meta) error {
	h.info("Handle my configs", "user_id", m.userID)
	text := "üìã –í–∞—à–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n–ü–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–µ—Ç."
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, ui.GetKeysKeyboard())
}

func (h *CallbackHandler) handleReferralStats(ctx context.Context, m meta) error {
	h.info("Handle referral stats", "user_id", m.userID)
	text := "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n–ü–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç."
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, ui.GetReferralsKeyboard())
}

func (h *CallbackHandler) handleMyReferrals(ctx context.Context, m meta) error {
	h.info("Handle my referrals", "user_id", m.userID)
	text := "üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã\n\n–ü–æ–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ—Ç."
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, ui.GetReferralsKeyboard())
}

func (h *CallbackHandler) handleMyReferralLink(ctx context.Context, m meta) error {
	h.info("Handle my referral link", "user_id", m.userID)
	text := "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\nhttps://t.me/your_bot?start=ref_123456"
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, ui.GetReferralsKeyboard())
}

func (h *CallbackHandler) handleCreateWireguard(ctx context.Context, m meta) error {
	h.info("Handle create wireguard", "user_id", m.userID)
	text := "üîë –°–æ–∑–¥–∞–Ω–∏–µ WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
	return h.bot.Send(ctx, m.chatID, text, nil)
}

func (h *CallbackHandler) handleCreateShadowsocks(ctx context.Context, m meta) error {
	h.info("Handle create shadowsocks", "user_id", m.userID)
	text := "üîë –°–æ–∑–¥–∞–Ω–∏–µ Shadowsocks –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
	return h.bot.Send(ctx, m.chatID, text, nil)
}

// ============================================================================
// –ü–ê–†–ê–ú–ï–¢–†–ò–ó–û–í–ê–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
// ============================================================================

func (h *CallbackHandler) handlePlanSelection(ctx context.Context, m meta, planID string) error {
	h.info("Handle plan selection", "plan_id", planID, "user_id", m.userID)

	plan, err := h.subUC.GetPlan(ctx, planID)
	if err != nil {
		h.err("GetPlan", err)
		return err
	}

	text := fmt.Sprintf("üì¶ –ü–ª–∞–Ω: %s\nüíµ –¶–µ–Ω–∞: %.0f‚ÇΩ\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –¥–Ω–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", plan.Name, plan.Price, plan.Days)
	keyboard := ui.GetPaymentMethodKeyboard(planID)
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, keyboard)
}

func (h *CallbackHandler) handleCreateSubscriptionByPlan(ctx context.Context, m meta, planID string) error {
	h.info("Handle create subscription by plan", "plan_id", planID, "user_id", m.userID)

	plan, err := h.subUC.GetPlan(ctx, planID)
	if err != nil {
		h.err("GetPlan", err)
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	dto := usecase.CreateSubscriptionDTO{
		UserID: m.userID,
		Name:   "–û—Å–Ω–æ–≤–Ω–∞—è",
		PlanID: planID,
		Days:   plan.Days,
	}

	subscription, err := h.subUC.CreateSubscription(ctx, dto)
	if err != nil {
		h.err("CreateSubscription", err)
		return err
	}

	// –°–æ–∑–¥–∞–µ–º VPN –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
	_, err = h.vpnUC.CreateVPNForSubscription(ctx, m.userID, subscription.ID)
	if err != nil {
		h.err("CreateVPN", err)
	}

	user, _ := h.userUC.GetUser(ctx, m.userID)
	text := fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '%s' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –¥–Ω–µ–π", plan.Name, plan.Days)
	hasT := false
	if user != nil {
		hasT = user.HasTrial
	}
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, ui.GetWelcomeKeyboard(hasT))
}

func (h *CallbackHandler) handleViewSubscription(ctx context.Context, m meta, subscriptionID string) error {
	h.info("Handle view subscription", "subscription_id", subscriptionID, "user_id", m.userID)

	subscription, err := h.subUC.GetSubscriptionByID(ctx, subscriptionID)
	if err != nil {
		h.err("GetSubscription", err)
		return err
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	if subscription.UserID != m.userID {
		h.warn("Access denied to subscription", "user_id", m.userID, "owner_id", subscription.UserID)
		return h.bot.Edit(ctx, m.chatID, m.messageID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ", nil)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
	plan, err := h.subUC.GetPlan(ctx, subscription.PlanID)
	if err != nil {
		h.err("GetPlan", err)
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	vpnConfigs, err := h.vpnUC.GetVPNConnectionsBySubscription(ctx, subscriptionID)
	if err != nil {
		h.err("GetVPNConnections", err)
		vpnConfigs = []*core.VPNConnection{}
	}

	text := ui.GetSubscriptionDetailText(subscription, plan, vpnConfigs)
	keyboard := ui.GetSubscriptionDetailKeyboard(subscription, vpnConfigs)
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, keyboard)
}

func (h *CallbackHandler) handleRenameSubscription(ctx context.Context, m meta, subscriptionID string) error {
	h.info("Handle rename subscription", "subscription_id", subscriptionID, "user_id", m.userID)

	subscription, err := h.subUC.GetSubscriptionByID(ctx, subscriptionID)
	if err != nil {
		h.err("GetSubscription", err)
		return err
	}

	if subscription.UserID != m.userID {
		return h.bot.Edit(ctx, m.chatID, m.messageID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ", nil)
	}

	text := "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n(–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)"
	keyboard := ui.GetCancelKeyboard()
	return h.bot.Send(ctx, m.chatID, text, keyboard)
}

func (h *CallbackHandler) handleExtendSubscription(ctx context.Context, m meta, subscriptionID string) error {
	h.info("Handle extend subscription", "subscription_id", subscriptionID, "user_id", m.userID)

	subscription, err := h.subUC.GetSubscriptionByID(ctx, subscriptionID)
	if err != nil {
		h.err("GetSubscription", err)
		return err
	}

	if subscription.UserID != m.userID {
		return h.bot.Edit(ctx, m.chatID, m.messageID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ", nil)
	}

	plans, err := h.subUC.GetPlans(ctx)
	if err != nil {
		h.err("GetPlans", err)
		return err
	}

	text := ui.GetExtendSubscriptionText(subscription)
	keyboard := ui.GetExtendSubscriptionKeyboard(subscriptionID, plans)
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, keyboard)
}

func (h *CallbackHandler) handleDeleteSubscription(ctx context.Context, m meta, subscriptionID string) error {
	h.info("Handle delete subscription", "subscription_id", subscriptionID, "user_id", m.userID)

	subscription, err := h.subUC.GetSubscriptionByID(ctx, subscriptionID)
	if err != nil {
		h.err("GetSubscription", err)
		return err
	}

	if subscription.UserID != m.userID {
		return h.bot.Edit(ctx, m.chatID, m.messageID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ", nil)
	}

	vpnConfigs, _ := h.vpnUC.GetVPNConnectionsBySubscription(ctx, subscriptionID)
	text := ui.GetDeleteSubscriptionText(subscription)
	keyboard := ui.GetSubscriptionDetailKeyboard(subscription, vpnConfigs)
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, keyboard)
}

func (h *CallbackHandler) handleExtendSubscriptionByPlan(ctx context.Context, m meta, planID, subscriptionID string) error {
	h.info("Handle extend subscription by plan", "subscription_id", subscriptionID, "plan_id", planID, "user_id", m.userID)

	plan, err := h.subUC.GetPlan(ctx, planID)
	if err != nil {
		h.err("GetPlan", err)
		return err
	}

	err = h.subUC.ExtendSubscription(ctx, m.userID, subscriptionID, plan.Days)
	if err != nil {
		h.err("ExtendSubscription", err)
		return err
	}

	user, _ := h.userUC.GetUser(ctx, m.userID)
	text := fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ %d –¥–Ω–µ–π!", plan.Days)
	hasT := false
	if user != nil {
		hasT = user.HasTrial
	}
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, ui.GetWelcomeKeyboard(hasT))
}

func (h *CallbackHandler) handlePayCard(ctx context.Context, m meta, planID string) error {
	h.info("Handle pay card", "plan_id", planID, "user_id", m.userID)

	plan, err := h.subUC.GetPlan(ctx, planID)
	if err != nil {
		h.err("GetPlan", err)
		return err
	}

	// MOCK: –ö–∞—Ä—Ç–æ–π –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ
	h.info("Creating MOCK card payment (auto-success)", "user_id", m.userID, "plan_id", planID)

	dto := usecase.CreateSubscriptionDTO{
		UserID: m.userID,
		Name:   "–û—Å–Ω–æ–≤–Ω–∞—è",
		PlanID: planID,
		Days:   plan.Days,
	}

	subscription, err := h.subUC.CreateSubscription(ctx, dto)
	if err != nil {
		h.err("CreateSubscription", err)
		return h.bot.Send(ctx, m.chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", nil)
	}

	// –°–æ–∑–¥–∞–µ–º VPN –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
	_, err = h.vpnUC.CreateVPNForSubscription(ctx, m.userID, subscription.ID)
	if err != nil {
		h.err("CreateVPN", err)
	}

	text := fmt.Sprintf("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!\n\nüéâ –ü–æ–¥–ø–∏—Å–∫–∞ '%s' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ %d –¥–Ω–µ–π", plan.Name, plan.Days)
	return h.bot.Send(ctx, m.chatID, text, ui.GetWelcomeKeyboard(false))
}

func (h *CallbackHandler) handlePaySBP(ctx context.Context, m meta, planID string) error {
	h.info("Handle pay SBP", "plan_id", planID, "user_id", m.userID)
	// MOCK: –°–ë–ü —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–∞—Ä—Ç–µ
	return h.handlePayCard(ctx, m, planID)
}

func (h *CallbackHandler) handlePayStars(ctx context.Context, m meta, planID string) error {
	h.info("Handle pay stars", "plan_id", planID, "user_id", m.userID)

	plan, err := h.subUC.GetPlan(ctx, planID)
	if err != nil {
		h.err("GetPlan", err)
		return err
	}

	text := fmt.Sprintf("‚≠ê –û–ø–ª–∞—Ç–∞ Telegram Stars\n\n–ü–ª–∞–Ω: %s\n–¶–µ–Ω–∞: %.0f‚ÇΩ\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", plan.Name, plan.Price)
	return h.bot.Send(ctx, m.chatID, text, ui.GetBackToPricingKeyboard())
}

func (h *CallbackHandler) handleViewConfig(ctx context.Context, m meta, configID string) error {
	h.info("Handle view config", "config_id", configID, "user_id", m.userID)
	text := "üîë –î–µ—Ç–∞–ª–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
	return h.bot.Edit(ctx, m.chatID, m.messageID, text, ui.GetKeysKeyboard())
}

func (h *CallbackHandler) handleConnectionGuide(ctx context.Context, m meta, subscriptionID string) error {
	h.info("Handle connection guide", "subscription_id", subscriptionID, "user_id", m.userID)

	subscription, err := h.subUC.GetSubscriptionByID(ctx, subscriptionID)
	if err != nil {
		h.err("GetSubscription", err)
		return h.bot.Send(ctx, m.chatID, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", nil)
	}

	if subscription.UserID != m.userID {
		return h.bot.Send(ctx, m.chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ", nil)
	}

	if !subscription.IsActive {
		return h.bot.Send(ctx, m.chatID, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", nil)
	}

	connectionURL := fmt.Sprintf("https://3xui.com/connect/%s", subscription.ID)

	text := fmt.Sprintf(`üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é*

*üîó URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*
`+"`%s`"+`

*üì± –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*

1Ô∏è‚É£ *–°–∫–∞—á–∞–π—Ç–µ VPN –∫–ª–∏–µ–Ω—Ç:*
   ‚Ä¢ WireGuard –¥–ª—è Android/iOS/Windows/Mac
   ‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç

2Ô∏è‚É£ *–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:*
   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å"
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∞—Ä—Ö–∏–≤–∞"

3Ô∏è‚É£ *–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å:*
   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –≤–∞—à—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   ‚Ä¢ –ì–æ—Ç–æ–≤–æ! –í–∞—à —Ç—Ä–∞—Ñ–∏–∫ –∑–∞—â–∏—â–µ–Ω

*üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*
   ‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º
   ‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
   ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏

*üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*
   –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, connectionURL)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "open_support"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ", fmt.Sprintf("view_subscription_%s", subscriptionID)),
		),
	)

	return h.bot.Send(ctx, m.chatID, text, keyboard)
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
// ============================================================================

func (h *CallbackHandler) info(msg string, args ...any) {
	if h.log != nil {
		h.log.Info(msg, args...)
	} else {
		slog.Info(msg, args...)
	}
}

func (h *CallbackHandler) warn(msg string, args ...any) {
	if h.log != nil {
		h.log.Warn(msg, args...)
	} else {
		slog.Warn(msg, args...)
	}
}

func (h *CallbackHandler) err(msg string, e error, args ...any) {
	if e == nil {
		return
	}
	allArgs := append([]any{"error", e}, args...)
	if h.log != nil {
		h.log.Error(msg, allArgs...)
	} else {
		slog.Error(msg, allArgs...)
	}
}
