package handlers

import (
	"context"
	"fmt"
	"log/slog"
	"sync"
	"time"

	"3xui-bot/internal/adapters/bot/telegram/ui"
	"3xui-bot/internal/core"
	"3xui-bot/internal/usecase"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// CallbackHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback query
type CallbackHandler struct {
	controller interface{}
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
	renamingUsers map[int64]string // userID -> subscriptionID
	mu            sync.RWMutex
}

// NewCallbackHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
func NewCallbackHandler(controller interface{}) *CallbackHandler {
	return &CallbackHandler{
		controller:    controller,
		renamingUsers: make(map[int64]string),
	}
}

// CanHandle –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
func (h *CallbackHandler) CanHandle(update tgbotapi.Update) bool {
	return update.CallbackQuery != nil
}

// Handle –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query
func (h *CallbackHandler) Handle(ctx context.Context, update tgbotapi.Update) error {
	if update.CallbackQuery == nil {
		return nil
	}

	userID := h.getUserID(update)
	chatID := h.getChatID(update)
	messageID := h.getMessageID(update)
	callbackData := update.CallbackQuery.Data

	slog.Info("Handling callback", "data", callbackData, "user_id", userID)

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	err := h.answerCallbackQuery(ctx, update.CallbackQuery.ID, "", false)
	if err != nil {
		slog.Error("Error answering callback query", "error", err)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
	switch callbackData {
	// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	case "get_trial":
		return h.handleGetTrial(ctx, userID, chatID, messageID)
	case "open_menu":
		return h.handleOpenMenu(ctx, userID, chatID, messageID)
	case "open_profile":
		return h.handleOpenProfile(ctx, userID, chatID, messageID)
	case "open_pricing":
		return h.handleOpenPricing(ctx, userID, chatID, messageID)
	case "my_subscriptions":
		return h.handleMySubscriptions(ctx, userID, chatID, messageID)
	case "create_subscription":
		return h.handleCreateSubscription(ctx, userID, chatID, messageID)
	case "open_keys":
		return h.handleOpenKeys(ctx, userID, chatID, messageID)
	case "open_referrals":
		return h.handleOpenReferrals(ctx, userID, chatID, messageID)
	case "open_support":
		return h.handleOpenSupport(ctx, userID, chatID, messageID)
	case "my_configs":
		return h.handleMyConfigs(ctx, userID, chatID, messageID)
	case "referral_stats":
		return h.handleReferralStats(ctx, userID, chatID, messageID)
	case "my_referrals":
		return h.handleMyReferrals(ctx, userID, chatID, messageID)
	case "my_referral_link":
		return h.handleMyReferralLink(ctx, userID, chatID, messageID)
	case "create_wireguard":
		return h.handleCreateWireguard(ctx, userID, chatID, messageID)
	case "create_shadowsocks":
		return h.handleCreateShadowsocks(ctx, userID, chatID, messageID)
	default:
		return h.handleParameterizedCallback(ctx, userID, chatID, messageID, callbackData)
	}
}

// ============================================================================
// –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
// ============================================================================

func (h *CallbackHandler) handleGetTrial(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling get trial", "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userObj, err := h.getUser(ctx, userID)
	if err != nil || userObj == nil {
		h.logError(err, "GetUser")
		return err
	}
	user := userObj.(*core.User)

	// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø
	success, err := h.activateTrial(ctx, userID)
	if err != nil {
		h.logError(err, "ActivateTrial")
		return err
	}

	var text string
	if success {
		text = "üéâ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 –¥–Ω—è!"

		// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
		err = h.createTrialSubscription(ctx, userID)
		if err != nil {
			h.logError(err, "CreateTrialSubscription")
			// –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç.–∫. –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º user.HasTrial –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		user.HasTrial = true
	} else {
		text = "‚ùå –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
	}

	keyboard := ui.GetWelcomeKeyboard(user.HasTrial)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º deleteAndSendMessage, —Ç.–∫. –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å —Ñ–æ—Ç–æ
	return h.deleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleOpenMenu(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling open menu", "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userObj, err := h.getUser(ctx, userID)
	if err != nil || userObj == nil {
		h.logError(err, "GetUser")
		return err
	}
	user := userObj.(*core.User)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
	subscriptions, _ := h.getUserSubscriptions(ctx, userID)
	isPremium := false
	statusText := "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
	subUntilText := ""

	if len(subscriptions) > 0 {
		for _, sub := range subscriptions {
			if !sub.IsExpired() {
				isPremium = true
				statusText = "‚≠ê Premium"
				subUntilText = sub.EndDate.Format("02.01.2006")
				break
			}
		}
	}

	text := ui.GetMainMenuWithProfileText(user, isPremium, statusText, subUntilText)
	keyboard := ui.GetMainMenuWithProfileKeyboard(isPremium)
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleOpenProfile(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling open profile", "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userObj, err := h.getUser(ctx, userID)
	if err != nil {
		h.logError(err, "GetUser")
		return err
	}

	user := userObj.(*core.User)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
	subsObj, _ := h.getUserSubscriptions(ctx, userID)
	isPremium := false
	statusText := "Free"
	subUntilText := "‚Äî"

	if len(subsObj) > 0 {
		for _, sub := range subsObj {
			if !sub.IsExpired() {
				isPremium = true
				statusText = "Premium"
				subUntilText = sub.EndDate.Format("02.01.2006")
				break
			}
		}
	}

	text := ui.GetProfileText(user, isPremium, statusText, subUntilText)
	keyboard := ui.GetProfileKeyboard(isPremium)
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleOpenPricing(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling open pricing", "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã
	plans, err := h.getPlans(ctx)
	if err != nil {
		h.logError(err, "GetPlans")
		return err
	}

	text := ui.GetPricingText(plans)
	keyboard := ui.GetPricingKeyboard(plans)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º deleteAndSendMessage, —Ç.–∫. –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–∂–µ—Ç –±—ã—Ç—å —Å —Ñ–æ—Ç–æ
	return h.deleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleMySubscriptions(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling my subscriptions", "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	subscriptions, err := h.getUserSubscriptions(ctx, userID)
	if err != nil {
		h.logError(err, "GetUserSubscriptions")
		return err
	}

	text := ui.GetSubscriptionsText(subscriptions)
	keyboard := ui.GetSubscriptionsKeyboard(subscriptions)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º deleteAndSendMessageWithMarkdownV2 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	return h.deleteAndSendMessageWithMarkdownV2(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleCreateSubscription(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling create subscription", "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã
	plans, err := h.getPlans(ctx)
	if err != nil {
		h.logError(err, "GetPlans")
		return err
	}

	text := ui.GetCreateSubscriptionText()
	keyboard := ui.GetCreateSubscriptionKeyboard(plans)
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleOpenKeys(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling open keys", "user_id", userID)
	text := ui.GetKeysText()
	keyboard := ui.GetKeysKeyboard()
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleOpenReferrals(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling open referrals", "user_id", userID)
	text := ui.GetReferralsText()
	keyboard := ui.GetReferralsKeyboard()
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleOpenSupport(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling open support", "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userObj, err := h.getUser(ctx, userID)
	if err != nil || userObj == nil {
		h.logError(err, "GetUser")
		return err
	}
	user := userObj.(*core.User)

	text := ui.GetSupportText()
	keyboard := ui.GetWelcomeKeyboard(user.HasTrial)
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleMyConfigs(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling my configs", "user_id", userID)
	text := "üìã –í–∞—à–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n–ü–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–µ—Ç."
	keyboard := ui.GetKeysKeyboard()
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleReferralStats(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling referral stats", "user_id", userID)
	text := "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n–ü–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç."
	keyboard := ui.GetReferralsKeyboard()
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleMyReferrals(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling my referrals", "user_id", userID)
	text := "üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã\n\n–ü–æ–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ—Ç."
	keyboard := ui.GetReferralsKeyboard()
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleMyReferralLink(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling my referral link", "user_id", userID)
	text := "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\nhttps://t.me/your_bot?start=ref_123456"
	keyboard := ui.GetReferralsKeyboard()
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleCreateWireguard(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling create wireguard", "user_id", userID)
	text := "üîë –°–æ–∑–¥–∞–Ω–∏–µ WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
	return h.sendMessage(ctx, chatID, text)
}

func (h *CallbackHandler) handleCreateShadowsocks(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling create shadowsocks", "user_id", userID)
	text := "üîë –°–æ–∑–¥–∞–Ω–∏–µ Shadowsocks –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
	return h.sendMessage(ctx, chatID, text)
}

// ============================================================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–ê–†–ê–ú–ï–¢–†–ò–ó–û–í–ê–ù–ù–´–• CALLBACK'–û–í
// ============================================================================

func (h *CallbackHandler) handleParameterizedCallback(ctx context.Context, userID, chatID int64, messageID int, callbackData string) error {
	slog.Info("Handling parameterized callback", "data", callbackData, "user_id", userID)

	// –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫
	if planID, ok := ui.ParsePlanCallback(callbackData); ok {
		return h.handlePlanSelection(ctx, userID, chatID, messageID, planID)
	}

	// –í—ã–±–æ—Ä –ø–ª–∞–Ω–∞ (select_plan_)
	if planID, ok := ui.ParseSelectPlanCallback(callbackData); ok {
		return h.handleSelectPlan(ctx, userID, chatID, messageID, planID)
	}

	// –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
	if planID, ok := ui.ParsePayCardCallback(callbackData); ok {
		return h.handlePayCard(ctx, userID, chatID, messageID, planID)
	}

	// –û–ø–ª–∞—Ç–∞ –°–ë–ü
	if planID, ok := ui.ParsePaySBPCallback(callbackData); ok {
		return h.handlePaySBP(ctx, userID, chatID, messageID, planID)
	}

	// –û–ø–ª–∞—Ç–∞ Stars
	if planID, ok := ui.ParsePayStarsCallback(callbackData); ok {
		return h.handlePayStars(ctx, userID, chatID, messageID, planID)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø–ª–∞–Ω—É
	if planID, ok := ui.ParseCreatePlanCallback(callbackData); ok {
		return h.handleCreateSubscriptionByPlan(ctx, userID, chatID, messageID, planID)
	}

	// –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–∫–∏
	if subscriptionID, ok := ui.ParseViewSubscriptionCallback(callbackData); ok {
		return h.handleViewSubscription(ctx, userID, chatID, messageID, subscriptionID)
	}

	// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
	if subscriptionID, ok := ui.ParseRenameSubscriptionCallback(callbackData); ok {
		return h.handleRenameSubscription(ctx, userID, chatID, messageID, subscriptionID)
	}

	// –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
	if subscriptionID, ok := ui.ParseExtendSubscriptionCallback(callbackData); ok {
		return h.handleExtendSubscription(ctx, userID, chatID, messageID, subscriptionID)
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
	if subscriptionID, ok := ui.ParseDeleteSubscriptionCallback(callbackData); ok {
		return h.handleDeleteSubscription(ctx, userID, chatID, messageID, subscriptionID)
	}

	// –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø–ª–∞–Ω—É
	if planID, subscriptionID, ok := ui.ParseExtendPlanCallback(callbackData); ok {
		return h.handleExtendSubscriptionByPlan(ctx, userID, chatID, messageID, planID, subscriptionID)
	}

	text := "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
	return h.editMessageText(ctx, chatID, messageID, text, nil)
}

func (h *CallbackHandler) handlePlanSelection(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling plan selection", "plan_id", planID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	text := fmt.Sprintf("üì¶ –ü–ª–∞–Ω: %s\nüíµ –¶–µ–Ω–∞: %.0f‚ÇΩ\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –¥–Ω–µ–π\n\n–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", plan.Name, plan.Price, plan.Days)
	keyboard := ui.GetPricingKeyboard([]*core.Plan{plan})
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleSelectPlan(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling select plan", "plan_id", planID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	text := fmt.Sprintf("üì¶ –ü–ª–∞–Ω: %s\nüíµ –¶–µ–Ω–∞: %.0f‚ÇΩ\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –¥–Ω–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", plan.Name, plan.Price, plan.Days)
	keyboard := ui.GetPaymentMethodKeyboard(planID)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º deleteAndSendMessage, —Ç.–∫. –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ
	return h.deleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handlePayCard(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling pay card", "plan_id", planID, "user_id", userID)

	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	// MOCK: –ö–∞—Ä—Ç–æ–π –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ
	slog.Info("Creating MOCK card payment (auto-success)", "user_id", userID, "plan_id", planID)

	now := time.Now()

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞
	subscriptionName := h.generateSubscriptionName(plan)

	dto := usecase.CreateSubscriptionDTO{
		UserID:    userID,
		Name:      subscriptionName,
		PlanID:    planID,
		Days:      plan.Days,
		StartDate: now,
		EndDate:   now.AddDate(0, 0, plan.Days),
		IsActive:  true,
	}

	subscription, err := h.createSubscription(ctx, dto)
	if err != nil {
		h.logError(err, "CreateSubscription")
		return h.sendError(chatID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
	}

	// –°–æ–∑–¥–∞–µ–º VPN –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
	sub, ok := subscription.(*core.Subscription)
	if ok && sub != nil {
		if vpnUC, ok := h.controller.(interface {
			VpnUC() *usecase.VPNUseCase
		}); ok {
			_, err = vpnUC.VpnUC().CreateVPNForSubscription(ctx, userID, sub.ID)
			if err != nil {
				h.logError(err, "CreateVPN")
			}
		}
	}

	text := fmt.Sprintf("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!\n\nüéâ –ü–æ–¥–ø–∏—Å–∫–∞ '%s' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ %d –¥–Ω–µ–π", plan.Name, plan.Days)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "open_menu"),
		),
	)
	return h.deleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handlePaySBP(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling pay SBP", "plan_id", planID, "user_id", userID)
	// MOCK: –°–ë–ü —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–∞—Ä—Ç–µ
	return h.handlePayCard(ctx, userID, chatID, messageID, planID)
}

func (h *CallbackHandler) handlePayStars(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling pay stars", "plan_id", planID, "user_id", userID)

	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	text := fmt.Sprintf("‚≠ê –û–ø–ª–∞—Ç–∞ Telegram Stars\n\n–ü–ª–∞–Ω: %s\n–¶–µ–Ω–∞: %.0f‚ÇΩ\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", plan.Name, plan.Price)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", "open_pricing"),
		),
	)
	return h.deleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) sendError(chatID int64, text string) error {
	if bot, ok := h.controller.(interface {
		Bot() *tgbotapi.BotAPI
	}); ok {
		msg := tgbotapi.NewMessage(chatID, "‚ùå "+text)
		_, err := bot.Bot().Send(msg)
		return err
	}
	return nil
}

func (h *CallbackHandler) handleCreateSubscriptionByPlan(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling create subscription by plan", "plan_id", planID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	createSubDTO := usecase.CreateSubscriptionDTO{
		UserID: userID,
		Name:   "–û—Å–Ω–æ–≤–Ω–∞—è",
		PlanID: planID,
		Days:   plan.Days,
	}

	_, err = h.createSubscription(ctx, createSubDTO)
	if err != nil {
		h.logError(err, "CreateSubscription")
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	userObj, err := h.getUser(ctx, userID)
	if err != nil {
		h.logError(err, "GetUser")
		return err
	}
	user := userObj.(*core.User)

	text := fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '%s' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –¥–Ω–µ–π", plan.Name, plan.Days)
	keyboard := ui.GetWelcomeKeyboard(user.HasTrial)
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleViewSubscription(ctx context.Context, userID, chatID int64, messageID int, subscriptionID string) error {
	slog.Info("Handling view subscription", "subscription_id", subscriptionID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := h.getSubscription(ctx, userID, subscriptionID)
	if err != nil {
		h.logError(err, "GetSubscription")
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
	plan, err := h.getPlan(ctx, subscription.PlanID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	vpnConfigs, err := h.getVPNConnectionsBySubscriptionID(ctx, subscriptionID)
	if err != nil {
		h.logError(err, "GetVPNConnections")
		vpnConfigs = []*core.VPNConnection{} // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
	}

	text := ui.GetSubscriptionDetailText(subscription, plan, vpnConfigs)
	keyboard := ui.GetSubscriptionDetailKeyboard(subscription, vpnConfigs)
	return h.editMessageWithMarkdownV2(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleRenameSubscription(ctx context.Context, userID, chatID int64, messageID int, subscriptionID string) error {
	slog.Info("Handling rename subscription", "subscription_id", subscriptionID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := h.getSubscription(ctx, userID, subscriptionID)
	if err != nil {
		h.logError(err, "GetSubscription")
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
	h.mu.Lock()
	h.renamingUsers[userID] = subscriptionID
	h.mu.Unlock()

	text := ui.GetRenameSubscriptionText(subscription)
	return h.sendMessage(ctx, chatID, text)
}

func (h *CallbackHandler) handleExtendSubscription(ctx context.Context, userID, chatID int64, messageID int, subscriptionID string) error {
	slog.Info("Handling extend subscription", "subscription_id", subscriptionID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := h.getSubscription(ctx, userID, subscriptionID)
	if err != nil {
		h.logError(err, "GetSubscription")
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
	plans, err := h.getPlans(ctx)
	if err != nil {
		h.logError(err, "GetPlans")
		return err
	}

	text := ui.GetExtendSubscriptionText(subscription)
	keyboard := ui.GetExtendSubscriptionKeyboard(subscriptionID, plans)
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleDeleteSubscription(ctx context.Context, userID, chatID int64, messageID int, subscriptionID string) error {
	slog.Info("Handling delete subscription", "subscription_id", subscriptionID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := h.getSubscription(ctx, userID, subscriptionID)
	if err != nil {
		h.logError(err, "GetSubscription")
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	vpnConfigs, err := h.getVPNConnectionsBySubscriptionID(ctx, subscriptionID)
	if err != nil {
		h.logError(err, "GetVPNConnections")
		vpnConfigs = []*core.VPNConnection{} // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
	}

	text := ui.GetDeleteSubscriptionText(subscription)
	keyboard := ui.GetSubscriptionDetailKeyboard(subscription, vpnConfigs)
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

func (h *CallbackHandler) handleExtendSubscriptionByPlan(ctx context.Context, userID, chatID int64, messageID int, planID, subscriptionID string) error {
	slog.Info("Handling extend subscription by plan", "subscription_id", subscriptionID, "plan_id", planID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	// –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	err = h.extendSubscription(ctx, userID, subscriptionID, plan.Days)
	if err != nil {
		h.logError(err, "ExtendSubscription")
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	userObj, err := h.getUser(ctx, userID)
	if err != nil {
		h.logError(err, "GetUser")
		return err
	}
	user := userObj.(*core.User)

	text := fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ %d –¥–Ω–µ–π!", plan.Days)
	keyboard := ui.GetWelcomeKeyboard(user.HasTrial)
	return h.editMessageText(ctx, chatID, messageID, text, keyboard)
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
// ============================================================================

func (h *CallbackHandler) getUserID(update tgbotapi.Update) int64 {
	if update.Message != nil {
		return update.Message.From.ID
	}
	if update.CallbackQuery != nil {
		return update.CallbackQuery.From.ID
	}
	return 0
}

func (h *CallbackHandler) getChatID(update tgbotapi.Update) int64 {
	if update.Message != nil {
		return update.Message.Chat.ID
	}
	if update.CallbackQuery != nil {
		return update.CallbackQuery.Message.Chat.ID
	}
	return 0
}

func (h *CallbackHandler) getMessageID(update tgbotapi.Update) int {
	if update.Message != nil {
		return update.Message.MessageID
	}
	if update.CallbackQuery != nil {
		return update.CallbackQuery.Message.MessageID
	}
	return 0
}

func (h *CallbackHandler) sendMessage(ctx context.Context, chatID int64, text string) error {
	if bot, ok := h.controller.(interface {
		SendMessage(ctx context.Context, chatID int64, text string) error
	}); ok {
		return bot.SendMessage(ctx, chatID, text)
	}
	return nil
}

func (h *CallbackHandler) sendMessageWithKeyboard(ctx context.Context, chatID int64, text string, keyboard interface{}) error {
	if bot, ok := h.controller.(interface {
		Bot() *tgbotapi.BotAPI
	}); ok {
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "MarkdownV2"
		if keyboard != nil {
			if kb, ok := keyboard.(tgbotapi.InlineKeyboardMarkup); ok {
				msg.ReplyMarkup = kb
			}
		}
		_, err := bot.Bot().Send(msg)
		return err
	}
	return nil
}

func (h *CallbackHandler) editMessageText(ctx context.Context, chatID int64, messageID int, text string, replyMarkup interface{}) error {
	if bot, ok := h.controller.(interface {
		EditMessageText(ctx context.Context, chatID int64, messageID int, text string, replyMarkup interface{}) error
	}); ok {
		return bot.EditMessageText(ctx, chatID, messageID, text, replyMarkup)
	}
	return nil
}

// editMessageWithMarkdownV2 —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (h *CallbackHandler) editMessageWithMarkdownV2(ctx context.Context, chatID int64, messageID int, text string, replyMarkup interface{}) error {
	if bot, ok := h.controller.(interface {
		Bot() *tgbotapi.BotAPI
	}); ok {
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
		editMsg.ParseMode = "MarkdownV2"

		if replyMarkup != nil {
			if kb, ok := replyMarkup.(tgbotapi.InlineKeyboardMarkup); ok {
				editMsg.ReplyMarkup = &kb
			}
		}

		_, err := bot.Bot().Send(editMsg)
		return err
	}
	return nil
}

func (h *CallbackHandler) answerCallbackQuery(ctx context.Context, callbackQueryID, text string, showAlert bool) error {
	if bot, ok := h.controller.(interface {
		AnswerCallbackQuery(ctx context.Context, callbackQueryID, text string, showAlert bool) error
	}); ok {
		return bot.AnswerCallbackQuery(ctx, callbackQueryID, text, showAlert)
	}
	return nil
}

func (h *CallbackHandler) deleteMessage(ctx context.Context, chatID int64, messageID int) error {
	if bot, ok := h.controller.(interface {
		Bot() *tgbotapi.BotAPI
	}); ok {
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
		_, err := bot.Bot().Request(deleteMsg)
		return err
	}
	return nil
}

func (h *CallbackHandler) deleteAndSendMessage(ctx context.Context, chatID int64, messageID int, text string, keyboard interface{}) error {
	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É)
	_ = h.deleteMessage(ctx, chatID, messageID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if bot, ok := h.controller.(interface {
		Bot() *tgbotapi.BotAPI
	}); ok {
		msg := tgbotapi.NewMessage(chatID, text)
		if keyboard != nil {
			if kb, ok := keyboard.(tgbotapi.InlineKeyboardMarkup); ok {
				msg.ReplyMarkup = kb
			}
		}
		_, err := bot.Bot().Send(msg)
		return err
	}
	return nil
}

// deleteAndSendMessageWithMarkdownV2 —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å MarkdownV2
func (h *CallbackHandler) deleteAndSendMessageWithMarkdownV2(ctx context.Context, chatID int64, messageID int, text string, keyboard interface{}) error {
	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É)
	_ = h.deleteMessage(ctx, chatID, messageID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å MarkdownV2
	if bot, ok := h.controller.(interface {
		Bot() *tgbotapi.BotAPI
	}); ok {
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "MarkdownV2"
		if keyboard != nil {
			if kb, ok := keyboard.(tgbotapi.InlineKeyboardMarkup); ok {
				msg.ReplyMarkup = kb
			}
		}
		_, err := bot.Bot().Send(msg)
		return err
	}
	return nil
}

// ============================================================================
// USE CASE –ú–ï–¢–û–î–´
// ============================================================================

func (h *CallbackHandler) activateTrial(ctx context.Context, userID int64) (bool, error) {
	if userUC, ok := h.controller.(interface {
		UserUC() *usecase.UserUseCase
	}); ok {
		return userUC.UserUC().ActivateTrial(ctx, userID)
	}
	return false, nil
}

func (h *CallbackHandler) getUser(ctx context.Context, userID int64) (interface{}, error) {
	if userUC, ok := h.controller.(interface {
		UserUC() *usecase.UserUseCase
	}); ok {
		return userUC.UserUC().GetUser(ctx, userID)
	}
	return nil, nil
}

func (h *CallbackHandler) getUserSubscriptions(ctx context.Context, userID int64) ([]*core.Subscription, error) {
	if subUC, ok := h.controller.(interface {
		SubUC() *usecase.SubscriptionUseCase
	}); ok {
		return subUC.SubUC().GetUserSubscriptions(ctx, userID)
	}
	return nil, nil
}

func (h *CallbackHandler) getVPNConnectionsBySubscriptionID(ctx context.Context, subscriptionID string) ([]*core.VPNConnection, error) {
	if vpnUC, ok := h.controller.(interface {
		VpnUC() *usecase.VPNUseCase
	}); ok {
		return vpnUC.VpnUC().GetVPNConnectionsBySubscription(ctx, subscriptionID)
	}
	return nil, nil
}

func (h *CallbackHandler) getPlans(ctx context.Context) ([]*core.Plan, error) {
	if subUC, ok := h.controller.(interface {
		SubUC() *usecase.SubscriptionUseCase
	}); ok {
		return subUC.SubUC().GetPlans(ctx)
	}
	return nil, nil
}

func (h *CallbackHandler) getPlan(ctx context.Context, planID string) (*core.Plan, error) {
	if subUC, ok := h.controller.(interface {
		SubUC() *usecase.SubscriptionUseCase
	}); ok {
		return subUC.SubUC().GetPlan(ctx, planID)
	}
	return nil, nil
}

func (h *CallbackHandler) createSubscription(ctx context.Context, dto usecase.CreateSubscriptionDTO) (interface{}, error) {
	if subUC, ok := h.controller.(interface {
		SubUC() *usecase.SubscriptionUseCase
	}); ok {
		return subUC.SubUC().CreateSubscription(ctx, dto)
	}
	return nil, nil
}

func (h *CallbackHandler) getSubscription(ctx context.Context, userID int64, subscriptionID string) (*core.Subscription, error) {
	if subUC, ok := h.controller.(interface {
		SubUC() *usecase.SubscriptionUseCase
	}); ok {
		return subUC.SubUC().GetSubscription(ctx, userID, subscriptionID)
	}
	return nil, nil
}

func (h *CallbackHandler) extendSubscription(ctx context.Context, userID int64, subscriptionID string, days int) error {
	if subUC, ok := h.controller.(interface {
		SubUC() *usecase.SubscriptionUseCase
	}); ok {
		return subUC.SubUC().ExtendSubscription(ctx, userID, subscriptionID, days)
	}
	return nil
}

func (h *CallbackHandler) logError(err error, context string) {
	if logger, ok := h.controller.(interface {
		LogError(err error, context string)
	}); ok {
		logger.LogError(err, context)
	}
}

// generateSubscriptionName –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞
func (h *CallbackHandler) generateSubscriptionName(plan *core.Plan) string {
	// –ë–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	var baseName string
	switch {
	case plan.Days <= 7:
		baseName = "–ù–µ–¥–µ–ª—å–Ω–∞—è"
	case plan.Days <= 30:
		baseName = "–ú–µ—Å—è—á–Ω–∞—è"
	case plan.Days <= 90:
		baseName = "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è"
	case plan.Days <= 365:
		baseName = "–ì–æ–¥–æ–≤–∞—è"
	default:
		baseName = "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è"
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
	now := time.Now()
	dateStr := now.Format("02.01")

	return fmt.Sprintf("%s (%s)", baseName, dateStr)
}

// createTrialSubscription —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –¥–Ω—è
func (h *CallbackHandler) createTrialSubscription(ctx context.Context, userID int64) error {
	now := time.Now()
	dto := usecase.CreateSubscriptionDTO{
		UserID:    userID,
		Name:      "–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
		PlanID:    "trial", // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
		Days:      3,       // 3 –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
		StartDate: now,
		EndDate:   now.AddDate(0, 0, 3),
		IsActive:  true,
	}

	subscription, err := h.createSubscription(ctx, dto)
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º VPN –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
	sub, ok := subscription.(*core.Subscription)
	if ok && sub != nil {
		if vpnUC, ok := h.controller.(interface {
			VpnUC() *usecase.VPNUseCase
		}); ok {
			_, err = vpnUC.VpnUC().CreateVPNForSubscription(ctx, userID, sub.ID)
			if err != nil {
				// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
				slog.Error("Failed to create VPN for trial subscription", "error", err)
			}
		}
	}

	return nil
}

// HandleTextMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫)
func (h *CallbackHandler) HandleTextMessage(ctx context.Context, userID int64, chatID int64, messageText string) (bool, error) {
	h.mu.RLock()
	subscriptionID, isRenaming := h.renamingUsers[userID]
	h.mu.RUnlock()

	if !isRenaming {
		return false, nil // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
	h.mu.Lock()
	delete(h.renamingUsers, userID)
	h.mu.Unlock()

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
	if len(messageText) < 1 || len(messageText) > 50 {
		text := "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤"
		return true, h.sendMessage(ctx, chatID, text)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
	err := h.updateSubscriptionName(ctx, userID, subscriptionID, messageText)
	if err != nil {
		h.logError(err, "UpdateSubscriptionName")
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
		return true, h.sendMessage(ctx, chatID, text)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := h.getSubscription(ctx, userID, subscriptionID)
	if err != nil {
		h.logError(err, "GetSubscription")
		text := "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
		return true, h.sendMessage(ctx, chatID, text)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
	plan, err := h.getPlan(ctx, subscription.PlanID)
	if err != nil {
		h.logError(err, "GetPlan")
		plan = &core.Plan{Name: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω"}
	}

	vpnConfigs, err := h.getVPNConnectionsBySubscriptionID(ctx, subscriptionID)
	if err != nil {
		vpnConfigs = []*core.VPNConnection{}
	}

	text := ui.GetSubscriptionDetailText(subscription, plan, vpnConfigs)
	keyboard := ui.GetSubscriptionDetailKeyboard(subscription, vpnConfigs)
	
	return true, h.sendMessageWithKeyboard(ctx, chatID, text, keyboard)
}

// updateSubscriptionName –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
func (h *CallbackHandler) updateSubscriptionName(ctx context.Context, userID int64, subscriptionID, name string) error {
	if subUC, ok := h.controller.(interface {
		SubUC() *usecase.SubscriptionUseCase
	}); ok {
		return subUC.SubUC().UpdateSubscriptionName(ctx, userID, subscriptionID, name)
	}
	return fmt.Errorf("subscription use case not available")
}
