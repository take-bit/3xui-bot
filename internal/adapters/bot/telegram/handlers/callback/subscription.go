package callback

import (
	"context"
	"fmt"
	"log/slog"
	"time"

	"3xui-bot/internal/adapters/bot/telegram/ui"
	"3xui-bot/internal/core"
	"3xui-bot/internal/usecase"
)

// HandleMySubscriptions handles the my_subscriptions callback
func (h *BaseHandler) HandleMySubscriptions(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling my subscriptions", "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	subscriptions, err := h.getUserSubscriptions(ctx, userID)
	if err != nil {
		h.logError(err, "GetUserSubscriptions")
		return err
	}

	text := ui.GetSubscriptionsText(subscriptions)
	keyboard := ui.GetSubscriptionsKeyboard(subscriptions)
	_ = h.msg.DeleteMessage(ctx, chatID, messageID)
	return h.msg.SendPhotoWithPreEscapedMarkdown(ctx, chatID, "static/images/bot_banner.png", text, keyboard)
}

// HandleCreateSubscription handles the create_subscription callback
func (h *BaseHandler) HandleCreateSubscription(ctx context.Context, userID, chatID int64, messageID int) error {
	slog.Info("Handling create subscription", "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã
	plans, err := h.getPlans(ctx)
	if err != nil {
		h.logError(err, "GetPlans")
		return err
	}

	text := ui.GetPricingText(plans)
	keyboard := ui.GetPricingKeyboard(plans)
	return h.msg.DeleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

// HandleSelectPlan handles the select_plan callback
func (h *BaseHandler) HandleSelectPlan(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling select plan", "plan_id", planID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	text := ui.GetPaymentMethodText(plan)
	keyboard := ui.GetPaymentMethodKeyboard(planID)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º deleteAndSendMessage, —Ç.–∫. –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ
	return h.msg.DeleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

// HandlePayCard handles the pay_card callback
func (h *BaseHandler) HandlePayCard(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling pay card", "plan_id", planID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	// MOCK: –ö–∞—Ä—Ç–æ–π –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ
	slog.Info("Creating MOCK card payment (auto-success)", "user_id", userID, "plan_id", planID)

	now := time.Now()

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞
	subscriptionName := h.generateSubscriptionName(plan)

	dto := usecase.CreateSubscriptionDTO{
		UserID:    userID,
		Name:      subscriptionName,
		PlanID:    planID,
		Days:      plan.Days,
		StartDate: now,
		EndDate:   now.AddDate(0, 0, plan.Days),
		IsActive:  true,
	}

	subscription, err := h.createSubscription(ctx, dto)
	if err != nil {
		h.logError(err, "CreateSubscription")
		return h.sendError(chatID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
	}

	// –°–æ–∑–¥–∞–µ–º VPN –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
	if sub, ok := subscription.(*core.Subscription); ok && sub != nil {
		_, err = h.createVPNForSubscription(ctx, userID, sub.ID)
		if err != nil {
			h.logError(err, "CreateVPN")
		}
	}

	text := fmt.Sprintf("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!\n\nüéâ –ü–æ–¥–ø–∏—Å–∫–∞ '%s' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ %d –¥–Ω–µ–π", plan.Name, plan.Days)
	keyboard := ui.GetBackToPricingKeyboard()
	return h.msg.EditMessageText(ctx, chatID, messageID, text, keyboard)
}

// HandlePaySBP handles the pay_sbp callback
func (h *BaseHandler) HandlePaySBP(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling pay SBP", "plan_id", planID, "user_id", userID)
	// SBP –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –∫–∞—Ä—Ç–∞
	return h.HandlePayCard(ctx, userID, chatID, messageID, planID)
}

// HandlePayStars handles the pay_stars callback
func (h *BaseHandler) HandlePayStars(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling pay stars", "plan_id", planID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	text := fmt.Sprintf("‚≠ê –û–ø–ª–∞—Ç–∞ Telegram Stars\n\nüí∞ –°—É–º–º–∞: %.0f‚ÇΩ\n‚è∞ –ü–ª–∞–Ω: %s (%d –¥–Ω–µ–π)\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", plan.Price, plan.Name, plan.Days)
	keyboard := ui.GetBackToPricingKeyboard()
	return h.msg.EditMessageText(ctx, chatID, messageID, text, keyboard)
}

// HandleViewSubscription handles the view_subscription callback
func (h *BaseHandler) HandleViewSubscription(ctx context.Context, userID, chatID int64, messageID int, subscriptionID string) error {
	slog.Info("Handling view subscription", "subscription_id", subscriptionID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := h.getSubscription(ctx, userID, subscriptionID)
	if err != nil {
		h.logError(err, "GetSubscription")
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
	plan, err := h.getPlan(ctx, subscription.PlanID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	vpnConfigs, err := h.getVPNConnectionsBySubscriptionID(ctx, subscriptionID)
	if err != nil {
		h.logError(err, "GetVPNConnections")
		vpnConfigs = []*core.VPNConnection{} // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
	}

	text := ui.GetSubscriptionDetailText(subscription, plan, vpnConfigs)
	keyboard := ui.GetSubscriptionDetailKeyboard(subscription, vpnConfigs)
	return h.msg.DeleteAndSendMessageWithMarkdownV2(ctx, chatID, messageID, text, keyboard)
}

// HandleRenameSubscription handles the rename_subscription callback
func (h *BaseHandler) HandleRenameSubscription(ctx context.Context, userID, chatID int64, messageID int, subscriptionID string) error {
	slog.Info("Handling rename subscription", "subscription_id", subscriptionID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := h.getSubscription(ctx, userID, subscriptionID)
	if err != nil {
		h.logError(err, "GetSubscription")
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
	h.mu.Lock()
	h.renamingUsers[userID] = subscriptionID
	h.mu.Unlock()

	text := ui.GetRenameSubscriptionText(subscription)
	return h.msg.SendMessage(ctx, chatID, text)
}

// HandleExtendSubscription handles the extend_subscription callback
func (h *BaseHandler) HandleExtendSubscription(ctx context.Context, userID, chatID int64, messageID int, subscriptionID string) error {
	slog.Info("Handling extend subscription", "subscription_id", subscriptionID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := h.getSubscription(ctx, userID, subscriptionID)
	if err != nil {
		h.logError(err, "GetSubscription")
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
	plans, err := h.getPlans(ctx)
	if err != nil {
		h.logError(err, "GetPlans")
		return err
	}

	text := ui.GetExtendSubscriptionText(subscription)
	keyboard := ui.GetExtendSubscriptionKeyboard(subscriptionID, plans)
	return h.msg.DeleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

// HandleDeleteSubscription handles the delete_subscription callback
func (h *BaseHandler) HandleDeleteSubscription(ctx context.Context, userID, chatID int64, messageID int, description string) error {
	slog.Info("Handling delete subscription", "user_id", userID)

	// Get subscription to pass to the text function
	subscription, err := h.getSubscription(ctx, userID, description)
	if err != nil {
		h.logError(err, "GetSubscription")
		return err
	}

	text := ui.GetDeleteSubscriptionText(subscription)
	keyboard := ui.GetBackToPricingKeyboard()
	return h.msg.DeleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

// HandleExtendSubscriptionByPlan handles the extend_subscription_by_plan callback
func (h *BaseHandler) HandleExtendSubscriptionByPlan(ctx context.Context, userID, chatID int64, messageID int, planID, subscriptionID string) error {
	slog.Info("Handling extend subscription by plan", "plan_id", planID, "subscription_id", subscriptionID, "user_id", userID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	// MOCK: –í—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ
	slog.Info("Creating MOCK extension (auto-success)", "user_id", userID, "plan_id", planID, "subscription_id", subscriptionID)

	// –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	err = h.extendSubscription(ctx, userID, subscriptionID, plan.Days)
	if err != nil {
		h.logError(err, "ExtendSubscription")
		return h.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
	}

	text := fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ %d –¥–Ω–µ–π!", plan.Days)
	keyboard := ui.GetBackToPricingKeyboard()
	return h.msg.DeleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}

// ============================================================================
// HELPER METHODS
// ============================================================================

// generateSubscriptionName –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞
func (h *BaseHandler) generateSubscriptionName(plan *core.Plan) string {
	// –ë–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	var baseName string
	switch {
	case plan.Days <= 7:
		baseName = "–ù–µ–¥–µ–ª—å–Ω–∞—è"
	case plan.Days <= 30:
		baseName = "–ú–µ—Å—è—á–Ω–∞—è"
	case plan.Days <= 90:
		baseName = "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è"
	case plan.Days <= 365:
		baseName = "–ì–æ–¥–æ–≤–∞—è"
	default:
		baseName = "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è"
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
	now := time.Now()
	dateStr := now.Format("02.01")

	return fmt.Sprintf("%s (%s)", baseName, dateStr)
}

// extendSubscription –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
func (h *BaseHandler) extendSubscription(ctx context.Context, userID int64, subscriptionID string, days int) error {
	return h.subUC.ExtendSubscription(ctx, userID, subscriptionID, days)
}

// HandleCreateSubscriptionByPlan handles the create_subscription_by_plan callback
func (h *BaseHandler) HandleCreateSubscriptionByPlan(ctx context.Context, userID, chatID int64, messageID int, planID string) error {
	slog.Info("Handling create subscription by plan", "plan_id", planID, "user_id", userID)

	// Get plan
	plan, err := h.getPlan(ctx, planID)
	if err != nil {
		h.logError(err, "GetPlan")
		return err
	}

	text := ui.GetPaymentMethodText(plan)
	keyboard := ui.GetPaymentMethodKeyboard(planID)
	// Use deleteAndSendMessage as it might be a photo
	return h.msg.DeleteAndSendMessage(ctx, chatID, messageID, text, keyboard)
}
