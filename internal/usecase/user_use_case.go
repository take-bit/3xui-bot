package usecase

import (
	"context"
	"fmt"

	"3xui-bot/internal/domain"
)

// UserUseCase –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç use case –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
type UserUseCase struct {
	userService         domain.UserService
	subscriptionService domain.SubscriptionService
	referralService     domain.ReferralService
	notificationService domain.NotificationService
}

// NewUserUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π User use case
func NewUserUseCase(
	userService domain.UserService,
	subscriptionService domain.SubscriptionService,
	referralService domain.ReferralService,
	notificationService domain.NotificationService,
) *UserUseCase {
	return &UserUseCase{
		userService:         userService,
		subscriptionService: subscriptionService,
		referralService:     referralService,
		notificationService: notificationService,
	}
}

// RegisterUser —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *UserUseCase) RegisterUser(ctx context.Context, telegramID int64, username, firstName, lastName, languageCode string) (*domain.User, error) {
	// 1. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.CreateOrUpdate(ctx, telegramID, username, firstName, lastName, languageCode)
	if err != nil {
		return nil, fmt.Errorf("failed to create/update user: %w", err)
	}

	// 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–µ –Ω–µ—Ç
	_, err = uc.subscriptionService.GetActive(ctx, user.ID)
	if err != nil {
		// –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é
		_, err = uc.subscriptionService.CreateTrial(ctx, user.ID, 3) // 3 –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
		if err != nil {
			// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
			fmt.Printf("Failed to create trial subscription for user %d: %v\n", user.ID, err)
		}
	}

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if uc.notificationService != nil {
		message := fmt.Sprintf("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!\n\nüéÅ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è\n\nüöÄ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!", firstName)
		_ = uc.notificationService.SendToUser(ctx, telegramID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", message, false)
	}

	return user, nil
}

// GetUserProfile –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *UserUseCase) GetUserProfile(ctx context.Context, telegramID int64) (*UserProfile, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, telegramID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := uc.subscriptionService.GetActive(ctx, user.ID)
	if err != nil {
		subscription = nil // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
	}

	// 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
	var referralStats *domain.ReferralStats
	if uc.referralService != nil {
		referralStats, err = uc.referralService.GetStats(ctx, user.ID)
		if err != nil {
			referralStats = nil // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
		}
	}

	// 4. –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
	daysRemaining := 0
	if subscription != nil {
		daysRemaining, _ = uc.subscriptionService.GetDaysRemaining(ctx, user.ID)
	}

	profile := &UserProfile{
		User:             user,
		Subscription:     subscription,
		DaysRemaining:    daysRemaining,
		ReferralStats:    referralStats,
		IsBlocked:        user.IsBlocked,
		RegistrationDate: user.CreatedAt.Format("02.01.2006"),
	}

	return profile, nil
}

// BlockUser –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *UserUseCase) BlockUser(ctx context.Context, telegramID int64, reason string) error {
	// 1. –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err := uc.userService.Block(ctx, telegramID)
	if err != nil {
		return fmt.Errorf("failed to block user: %w", err)
	}

	// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
	if uc.notificationService != nil {
		message := fmt.Sprintf("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\nüìã –ü—Ä–∏—á–∏–Ω–∞: %s\n\n‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", reason)
		_ = uc.notificationService.SendToUser(ctx, telegramID, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞", message, false)
	}

	return nil
}

// UnblockUser —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *UserUseCase) UnblockUser(ctx context.Context, telegramID int64) error {
	// 1. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err := uc.userService.Unblock(ctx, telegramID)
	if err != nil {
		return fmt.Errorf("failed to unblock user: %w", err)
	}

	// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
	if uc.notificationService != nil {
		message := "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n\nüéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!"
		_ = uc.notificationService.SendToUser(ctx, telegramID, "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", message, false)
	}

	return nil
}

// GetUserDisplayName –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *UserUseCase) GetUserDisplayName(ctx context.Context, telegramID int64) (string, error) {
	return uc.userService.GetDisplayName(ctx, telegramID)
}

// UpdateUserLanguage –æ–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *UserUseCase) UpdateUserLanguage(ctx context.Context, telegramID int64, languageCode string) error {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err := uc.userService.GetByTelegramID(ctx, telegramID)
	if err != nil {
		return fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ UpdateLanguage –≤ UserService
	// err = uc.userService.UpdateLanguage(ctx, user.ID, languageCode)
	// if err != nil {
	//     return fmt.Errorf("failed to update language: %w", err)
	// }

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	if uc.notificationService != nil {
		message := fmt.Sprintf("üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: %s", languageCode)
		_ = uc.notificationService.SendToUser(ctx, telegramID, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", message, false)
	}

	return fmt.Errorf("language update not implemented yet")
}

// GetUserStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *UserUseCase) GetUserStats(ctx context.Context, telegramID int64) (*UserStats, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, telegramID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
	var referralStats *domain.ReferralStats
	if uc.referralService != nil {
		referralStats, err = uc.referralService.GetStats(ctx, user.ID)
		if err != nil {
			referralStats = nil
		}
	}

	// 3. –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
	daysRemaining := 0
	_, err = uc.subscriptionService.GetActive(ctx, user.ID)
	if err == nil {
		daysRemaining, _ = uc.subscriptionService.GetDaysRemaining(ctx, user.ID)
	}

	stats := &UserStats{
		UserID:           user.ID,
		TelegramID:       user.TelegramID,
		Username:         user.Username,
		FirstName:        user.FirstName,
		LastName:         user.LastName,
		LanguageCode:     user.LanguageCode,
		IsBlocked:        user.IsBlocked,
		RegistrationDate: user.CreatedAt.Format("02.01.2006"),
		DaysRemaining:    daysRemaining,
		ReferralStats:    referralStats,
	}

	return stats, nil
}

// SendUserNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (uc *UserUseCase) SendUserNotification(ctx context.Context, telegramID int64, title, message string, isHTML bool) error {
	if uc.notificationService == nil {
		return fmt.Errorf("notification service not available")
	}

	return uc.notificationService.SendToUser(ctx, telegramID, title, message, isHTML)
}

// UserProfile –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserProfile struct {
	User             *domain.User          `json:"user"`
	Subscription     *domain.Subscription  `json:"subscription,omitempty"`
	DaysRemaining    int                   `json:"days_remaining"`
	ReferralStats    *domain.ReferralStats `json:"referral_stats,omitempty"`
	IsBlocked        bool                  `json:"is_blocked"`
	RegistrationDate string                `json:"registration_date"`
}

// UserStats –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserStats struct {
	UserID           int64                 `json:"user_id"`
	TelegramID       int64                 `json:"telegram_id"`
	Username         string                `json:"username"`
	FirstName        string                `json:"first_name"`
	LastName         string                `json:"last_name"`
	LanguageCode     string                `json:"language_code"`
	IsBlocked        bool                  `json:"is_blocked"`
	RegistrationDate string                `json:"registration_date"`
	DaysRemaining    int                   `json:"days_remaining"`
	ReferralStats    *domain.ReferralStats `json:"referral_stats,omitempty"`
}
