package usecase

import (
	"context"
	"fmt"
	"time"

	"3xui-bot/internal/domain"
)

// PaymentUseCase –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç use case –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
type PaymentUseCase struct {
	paymentService      domain.PaymentService
	subscriptionService domain.SubscriptionService
	vpnUseCase          *VPNUseCase
	userService         domain.UserService
	notificationService domain.NotificationService
}

// NewPaymentUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Payment use case
func NewPaymentUseCase(
	paymentService domain.PaymentService,
	subscriptionService domain.SubscriptionService,
	vpnUseCase *VPNUseCase,
	userService domain.UserService,
	notificationService domain.NotificationService,
) *PaymentUseCase {
	return &PaymentUseCase{
		paymentService:      paymentService,
		subscriptionService: subscriptionService,
		vpnUseCase:          vpnUseCase,
		userService:         userService,
		notificationService: notificationService,
	}
}

// CreatePayment —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
func (uc *PaymentUseCase) CreatePayment(ctx context.Context, userID int64, planID int64, amount int, currency string, method domain.PaymentMethod) (*domain.Payment, error) {
	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
	payment, err := uc.paymentService.Create(ctx, user.ID, planID, amount, currency, method)
	if err != nil {
		return nil, fmt.Errorf("failed to create payment: %w", err)
	}

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
	if uc.notificationService != nil {
		message := fmt.Sprintf("üí≥ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n\nüí∞ –°—É–º–º–∞: %d %s\nüìã –ú–µ—Ç–æ–¥: %s\nüÜî ID: %d",
			amount, currency, method, payment.ID)
		_ = uc.notificationService.SendToUser(ctx, userID, "–ü–ª–∞—Ç–µ–∂", message, false)
	}

	return payment, nil
}

// ProcessPaymentWebhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
func (uc *PaymentUseCase) ProcessPaymentWebhook(ctx context.Context, externalID string, status domain.PaymentStatus) error {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –ø–æ –≤–Ω–µ—à–Ω–µ–º—É ID
	payment, err := uc.paymentService.GetByExternalID(ctx, externalID)
	if err != nil {
		return fmt.Errorf("failed to get payment by external ID: %w", err)
	}

	// 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
	err = uc.paymentService.ProcessWebhook(ctx, externalID, status)
	if err != nil {
		return fmt.Errorf("failed to process webhook: %w", err)
	}

	// 3. –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ VPN
	if status == domain.PaymentStatusCompleted {
		err = uc.handleSuccessfulPayment(ctx, payment)
		if err != nil {
			return fmt.Errorf("failed to handle successful payment: %w", err)
		}
	}

	// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if uc.notificationService != nil {
		user, err := uc.userService.GetByTelegramID(ctx, payment.UserID)
		if err == nil {
			var message string
			switch status {
			case domain.PaymentStatusCompleted:
				message = "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\nüéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!"
			case domain.PaymentStatusFailed:
				message = "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
			case domain.PaymentStatusCancelled:
				message = "üö´ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω"
			default:
				message = fmt.Sprintf("üìã –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: %s", status)
			}
			_ = uc.notificationService.SendToUser(ctx, user.TelegramID, "–ü–ª–∞—Ç–µ–∂", message, false)
		}
	}

	return nil
}

// CompletePayment –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤—Ä—É—á–Ω—É—é
func (uc *PaymentUseCase) CompletePayment(ctx context.Context, paymentID int64) error {
	// 1. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞—Ç–µ–∂
	err := uc.paymentService.Complete(ctx, paymentID)
	if err != nil {
		return fmt.Errorf("failed to complete payment: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetByID –≤ PaymentService
	// payment, err := uc.paymentService.GetByID(ctx, paymentID)
	// if err != nil {
	//     return fmt.Errorf("failed to get payment: %w", err)
	// }

	// 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
	// err = uc.handleSuccessfulPayment(ctx, payment)
	// if err != nil {
	//     return fmt.Errorf("failed to handle successful payment: %w", err)
	// }

	return nil
}

// FailPayment –ø–æ–º–µ—á–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
func (uc *PaymentUseCase) FailPayment(ctx context.Context, paymentID int64) error {
	// 1. –ü–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
	err := uc.paymentService.Fail(ctx, paymentID)
	if err != nil {
		return fmt.Errorf("failed to fail payment: %w", err)
	}

	// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	// TODO: –ü–æ–ª—É—á–∏—Ç—å userID –∏–∑ –ø–ª–∞—Ç–µ–∂–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

	return nil
}

// GetPendingPayments –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
func (uc *PaymentUseCase) GetPendingPayments(ctx context.Context) ([]*domain.Payment, error) {
	return uc.paymentService.GetPending(ctx)
}

// GetUserPayments –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *PaymentUseCase) GetUserPayments(ctx context.Context, userID int64) ([]*domain.Payment, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetByUserID –≤ PaymentService
	// return uc.paymentService.GetByUserID(ctx, user.ID)
	return nil, fmt.Errorf("GetByUserID not implemented yet")
}

// handleSuccessfulPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
func (uc *PaymentUseCase) handleSuccessfulPayment(ctx context.Context, payment *domain.Payment) error {
	// 1. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –ø–ª–∞—Ç–µ–∂–∞
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ Days –≤ Payment –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ Plan
	days := 30 // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	subscription, err := uc.subscriptionService.CreateFromPayment(ctx, payment.UserID, payment.PlanID, days)
	if err != nil {
		return fmt.Errorf("failed to create subscription from payment: %w", err)
	}

	// 2. –°–æ–∑–¥–∞–µ–º VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	_, err = uc.vpnUseCase.CreateVPNConnection(ctx, payment.UserID, "")
	if err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
		fmt.Printf("Failed to create VPN connection after payment: %v\n", err)
	}

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	if uc.notificationService != nil {
		user, err := uc.userService.GetByTelegramID(ctx, payment.UserID)
		if err == nil {
			message := fmt.Sprintf("üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: %s\nüîó VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
				subscription.EndDate.Format("02.01.2006 15:04"))
			_ = uc.notificationService.SendToUser(ctx, user.TelegramID, "–ü–æ–¥–ø–∏—Å–∫–∞", message, false)
		}
	}

	return nil
}

// ProcessRefund –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
func (uc *PaymentUseCase) ProcessRefund(ctx context.Context, paymentID int64, reason string) error {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetByID –≤ PaymentService
	// payment, err := uc.paymentService.GetByID(ctx, paymentID)
	// if err != nil {
	//     return fmt.Errorf("failed to get payment: %w", err)
	// }

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å
	// if payment.Status != domain.PaymentStatusCompleted {
	//     return fmt.Errorf("payment is not completed, cannot refund")
	// }

	// 3. –°–æ–∑–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞

	// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if uc.notificationService != nil {
		// user, err := uc.userService.GetByTelegramID(ctx, payment.UserID)
		// if err == nil {
		//     message := fmt.Sprintf("üí∞ –í–æ–∑–≤—Ä–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n\nüí∏ –°—É–º–º–∞: %d %s\nüìã –ü—Ä–∏—á–∏–Ω–∞: %s",
		//         payment.Amount, payment.Currency, reason)
		//     _ = uc.notificationService.SendToUser(ctx, user.TelegramID, "–í–æ–∑–≤—Ä–∞—Ç", message, false)
		// }
	}

	return fmt.Errorf("refund processing not implemented yet")
}

// GetPaymentStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
func (uc *PaymentUseCase) GetPaymentStats(ctx context.Context, from, to time.Time) (*PaymentStats, error) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
	return nil, fmt.Errorf("payment stats not implemented yet")
}

// PaymentStats –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
type PaymentStats struct {
	TotalPayments      int     `json:"total_payments"`
	SuccessfulPayments int     `json:"successful_payments"`
	FailedPayments     int     `json:"failed_payments"`
	TotalAmount        int     `json:"total_amount"`
	AverageAmount      float64 `json:"average_amount"`
	SuccessRate        float64 `json:"success_rate"`
}
