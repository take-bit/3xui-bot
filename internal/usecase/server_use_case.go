package usecase

import (
	"context"
	"fmt"
	"time"

	"3xui-bot/internal/domain"
)

// ServerUseCase –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç use case –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏
type ServerUseCase struct {
	serverService       domain.ServerService
	notificationService domain.NotificationService
}

// NewServerUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Server use case
func NewServerUseCase(
	serverService domain.ServerService,
	notificationService domain.NotificationService,
) *ServerUseCase {
	return &ServerUseCase{
		serverService:       serverService,
		notificationService: notificationService,
	}
}

// GetAvailableServers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *ServerUseCase) GetAvailableServers(ctx context.Context) ([]*domain.Server, error) {
	return uc.serverService.GetAvailableServers(ctx)
}

// GetServerHealth –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
func (uc *ServerUseCase) GetServerHealth(ctx context.Context, serverID int64) (*domain.ServerHealth, error) {
	return uc.serverService.GetServerHealth(ctx, serverID)
}

// GetAllServersHealth –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *ServerUseCase) GetAllServersHealth(ctx context.Context) (map[int64]*domain.ServerHealth, error) {
	return uc.serverService.GetAllServersHealth(ctx)
}

// GetServerStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
func (uc *ServerUseCase) GetServerStats(ctx context.Context, serverID int64) (*domain.ServerStats, error) {
	return uc.serverService.GetServerStats(ctx, serverID)
}

// GetAllServersStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *ServerUseCase) GetAllServersStats(ctx context.Context) (map[int64]*domain.ServerStats, error) {
	return uc.serverService.GetAllServersStats(ctx)
}

// StartHealthMonitoring –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *ServerUseCase) StartHealthMonitoring(ctx context.Context) error {
	err := uc.serverService.StartHealthMonitoring(ctx)
	if err != nil {
		return fmt.Errorf("failed to start health monitoring: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	if uc.notificationService != nil {
		message := "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω\n\nüìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
		_ = uc.notificationService.SendToAll(ctx, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤", message, false)
	}

	return nil
}

// StopHealthMonitoring –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *ServerUseCase) StopHealthMonitoring() error {
	err := uc.serverService.StopHealthMonitoring()
	if err != nil {
		return fmt.Errorf("failed to stop health monitoring: %w", err)
	}

	return nil
}

// IsHealthMonitoringActive –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
func (uc *ServerUseCase) IsHealthMonitoringActive() bool {
	return uc.serverService.IsHealthMonitoringActive()
}

// GetServerOverview –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–∑–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *ServerUseCase) GetServerOverview(ctx context.Context) (*ServerOverview, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
	healthMap, err := uc.serverService.GetAllServersHealth(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get servers health: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
	statsMap, err := uc.serverService.GetAllServersStats(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get servers stats: %w", err)
	}

	// 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
	servers, err := uc.serverService.GetAvailableServers(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get available servers: %w", err)
	}

	// 4. –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–∑–æ—Ä
	overview := &ServerOverview{
		TotalServers:     len(servers),
		HealthyServers:   0,
		UnhealthyServers: 0,
		TotalClients:     0,
		ActiveClients:    0,
		AverageLoad:      0.0,
		LastUpdate:       time.Now(),
		Servers:          make([]ServerInfo, 0, len(servers)),
	}

	var totalLoad float64
	healthyCount := 0

	for _, server := range servers {
		health, healthExists := healthMap[server.ID]
		stats, statsExists := statsMap[server.ID]

		serverInfo := ServerInfo{
			Server: server,
			Health: health,
			Stats:  stats,
		}

		if healthExists && health.IsHealthy {
			healthyCount++
			overview.HealthyServers++
		} else {
			overview.UnhealthyServers++
		}

		if statsExists {
			overview.TotalClients += stats.TotalClients
			overview.ActiveClients += stats.ActiveClients
			totalLoad += stats.LoadPercentage
		}

		overview.Servers = append(overview.Servers, serverInfo)
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –Ω–∞–≥—Ä—É–∑–∫—É
	if len(servers) > 0 {
		overview.AverageLoad = totalLoad / float64(len(servers))
	}

	return overview, nil
}

// CheckServerStatus –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
func (uc *ServerUseCase) CheckServerStatus(ctx context.Context, serverID int64) error {
	// 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
	health, err := uc.serverService.GetServerHealth(ctx, serverID)
	if err != nil {
		return fmt.Errorf("failed to get server health: %w", err)
	}

	// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
	if uc.notificationService != nil {
		var message string
		if health.IsHealthy {
			message = fmt.Sprintf("‚úÖ –°–µ—Ä–≤–µ—Ä %d —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n\nüìä –ù–∞–≥—Ä—É–∑–∫–∞: %.1f%%\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: %d",
				serverID, health.CurrentLoad*100, health.ActiveClients)
		} else {
			message = fmt.Sprintf("‚ùå –°–µ—Ä–≤–µ—Ä %d –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\nüìã –û—à–∏–±–∫–∞: %s\n‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: %s",
				serverID, health.LastError, health.LastCheck.Format("02.01.2006 15:04"))
		}

		_ = uc.notificationService.SendToAll(ctx, "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", message, false)
	}

	return nil
}

// GetServerLoadBalancingInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ –Ω–∞–≥—Ä—É–∑–∫–∏
func (uc *ServerUseCase) GetServerLoadBalancingInfo(ctx context.Context) (*LoadBalancingInfo, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤
	overview, err := uc.GetServerOverview(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get server overview: %w", err)
	}

	// 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
	info := &LoadBalancingInfo{
		TotalServers:       overview.TotalServers,
		HealthyServers:     overview.HealthyServers,
		AverageLoad:        overview.AverageLoad,
		OverloadedServers:  0,
		UnderloadedServers: 0,
		Recommendations:    make([]string, 0),
	}

	// 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä
	for _, serverInfo := range overview.Servers {
		if serverInfo.Stats != nil {
			load := serverInfo.Stats.LoadPercentage
			if load > 80 {
				info.OverloadedServers++
				info.Recommendations = append(info.Recommendations,
					fmt.Sprintf("–°–µ—Ä–≤–µ—Ä %d –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (%.1f%%)", serverInfo.Server.ID, load))
			} else if load < 20 {
				info.UnderloadedServers++
				info.Recommendations = append(info.Recommendations,
					fmt.Sprintf("–°–µ—Ä–≤–µ—Ä %d –Ω–µ–¥–æ–≥—Ä—É–∂–µ–Ω (%.1f%%)", serverInfo.Server.ID, load))
			}
		}
	}

	// 4. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	if info.OverloadedServers > 0 {
		info.Recommendations = append(info.Recommendations, "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
	}

	if info.UnderloadedServers > info.HealthyServers/2 {
		info.Recommendations = append(info.Recommendations, "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–æ–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
	}

	return info, nil
}

// SendServerMaintenanceNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
func (uc *ServerUseCase) SendServerMaintenanceNotification(ctx context.Context, serverID int64, startTime, endTime time.Time) error {
	if uc.notificationService == nil {
		return fmt.Errorf("notification service not available")
	}

	message := fmt.Sprintf("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ %d\n\n‚è∞ –ù–∞—á–∞–ª–æ: %s\n‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: %s\n\n‚ö†Ô∏è –í —ç—Ç–æ –≤—Ä–µ–º—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
		serverID, startTime.Format("02.01.2006 15:04"), endTime.Format("02.01.2006 15:04"))

	return uc.notificationService.SendToAll(ctx, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã", message, false)
}

// GetServerPerformanceMetrics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *ServerUseCase) GetServerPerformanceMetrics(ctx context.Context) (*PerformanceMetrics, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
	statsMap, err := uc.serverService.GetAllServersStats(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get servers stats: %w", err)
	}

	// 2. –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
	metrics := &PerformanceMetrics{
		TotalServers:  len(statsMap),
		TotalClients:  0,
		ActiveClients: 0,
		TotalTraffic:  0,
		AverageUptime: 0,
		AverageLoad:   0,
		LastUpdate:    time.Now(),
	}

	var totalUptime, totalLoad float64
	serverCount := 0

	for _, stats := range statsMap {
		metrics.TotalClients += stats.TotalClients
		metrics.ActiveClients += stats.ActiveClients
		metrics.TotalTraffic += stats.BytesTransferred
		totalUptime += float64(stats.Uptime.Seconds())
		totalLoad += stats.LoadPercentage
		serverCount++
	}

	if serverCount > 0 {
		metrics.AverageUptime = time.Duration(totalUptime/float64(serverCount)) * time.Second
		metrics.AverageLoad = totalLoad / float64(serverCount)
	}

	return metrics, nil
}

// ServerOverview –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±–∑–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
type ServerOverview struct {
	TotalServers     int          `json:"total_servers"`
	HealthyServers   int          `json:"healthy_servers"`
	UnhealthyServers int          `json:"unhealthy_servers"`
	TotalClients     int          `json:"total_clients"`
	ActiveClients    int          `json:"active_clients"`
	AverageLoad      float64      `json:"average_load"`
	LastUpdate       time.Time    `json:"last_update"`
	Servers          []ServerInfo `json:"servers"`
}

// ServerInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
type ServerInfo struct {
	Server *domain.Server       `json:"server"`
	Health *domain.ServerHealth `json:"health,omitempty"`
	Stats  *domain.ServerStats  `json:"stats,omitempty"`
}

// LoadBalancingInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ –Ω–∞–≥—Ä—É–∑–∫–∏
type LoadBalancingInfo struct {
	TotalServers       int      `json:"total_servers"`
	HealthyServers     int      `json:"healthy_servers"`
	AverageLoad        float64  `json:"average_load"`
	OverloadedServers  int      `json:"overloaded_servers"`
	UnderloadedServers int      `json:"underloaded_servers"`
	Recommendations    []string `json:"recommendations"`
}

// PerformanceMetrics –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
type PerformanceMetrics struct {
	TotalServers  int           `json:"total_servers"`
	TotalClients  int           `json:"total_clients"`
	ActiveClients int           `json:"active_clients"`
	TotalTraffic  int64         `json:"total_traffic"`
	AverageUptime time.Duration `json:"average_uptime"`
	AverageLoad   float64       `json:"average_load"`
	LastUpdate    time.Time     `json:"last_update"`
}
