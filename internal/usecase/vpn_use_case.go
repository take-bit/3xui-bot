package usecase

import (
	"context"
	"fmt"

	"3xui-bot/internal/domain"
)

// VPNUseCase –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç use case –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
type VPNUseCase struct {
	vpnService          domain.VPNService
	serverService       domain.ServerService
	userService         domain.UserService
	subscriptionService domain.SubscriptionService
	notificationService domain.NotificationService
}

// NewVPNUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π VPN use case
func NewVPNUseCase(
	vpnService domain.VPNService,
	serverService domain.ServerService,
	userService domain.UserService,
	subscriptionService domain.SubscriptionService,
	notificationService domain.NotificationService,
) *VPNUseCase {
	return &VPNUseCase{
		vpnService:          vpnService,
		serverService:       serverService,
		userService:         userService,
		subscriptionService: subscriptionService,
		notificationService: notificationService,
	}
}

// CreateVPNConnection —Å–æ–∑–¥–∞–µ—Ç VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *VPNUseCase) CreateVPNConnection(ctx context.Context, userID int64, region string) (*domain.VPNConnection, error) {
	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
	_, err = uc.subscriptionService.GetActive(ctx, user.ID)
	if err != nil {
		return nil, fmt.Errorf("no active subscription found: %w", err)
	}

	// 3. –°–æ–∑–¥–∞–µ–º VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ VPN Service
	connection, err := uc.vpnService.CreateConnectionWithRegion(ctx, user.ID, region)
	if err != nil {
		return nil, fmt.Errorf("failed to create VPN connection: %w", err)
	}

	// 4. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	serverHealth, err := uc.serverService.GetServerHealth(ctx, connection.ServerID)
	if err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
		fmt.Printf("Failed to get server health: %v\n", err)
	}

	// 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if uc.notificationService != nil {
		message := fmt.Sprintf("‚úÖ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\nüåç –°–µ—Ä–≤–µ—Ä: %s\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: %s",
			connection.ConfigURL,
			connection.ExpiresAt.Format("02.01.2006 15:04"))

		if serverHealth != nil && !serverHealth.IsHealthy {
			message += "\n‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
		}

		_ = uc.notificationService.SendToUser(ctx, userID, "VPN –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", message, false)
	}

	return connection, nil
}

// GetVPNConnectionInfo –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
func (uc *VPNUseCase) GetVPNConnectionInfo(ctx context.Context, userID int64) (*domain.VPNConnection, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
	connection, err := uc.vpnService.GetConnectionInfo(ctx, user.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get VPN connection info: %w", err)
	}

	// 3. –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
	serverHealth, err := uc.serverService.GetServerHealth(ctx, connection.ServerID)
	if err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
		fmt.Printf("Failed to get server health: %v\n", err)
	}

	// TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–≤–µ—Ç
	_ = serverHealth

	return connection, nil
}

// DeleteVPNConnection —É–¥–∞–ª—è–µ—Ç VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (uc *VPNUseCase) DeleteVPNConnection(ctx context.Context, userID int64) error {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –£–¥–∞–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	err = uc.vpnService.DeleteConnection(ctx, user.ID)
	if err != nil {
		return fmt.Errorf("failed to delete VPN connection: %w", err)
	}

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if uc.notificationService != nil {
		message := "‚ùå VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"
		_ = uc.notificationService.SendToUser(ctx, userID, "VPN –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", message, false)
	}

	return nil
}

// ExtendVPNConnection –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (uc *VPNUseCase) ExtendVPNConnection(ctx context.Context, userID int64, days int) error {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	err = uc.subscriptionService.Extend(ctx, user.ID, days)
	if err != nil {
		return fmt.Errorf("failed to extend subscription: %w", err)
	}

	// 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	subscription, err := uc.subscriptionService.GetActive(ctx, user.ID)
	if err != nil {
		return fmt.Errorf("failed to get updated subscription: %w", err)
	}

	err = uc.vpnService.UpdateConnectionExpiry(ctx, user.ID, subscription.EndDate)
	if err != nil {
		return fmt.Errorf("failed to update VPN connection expiry: %w", err)
	}

	// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if uc.notificationService != nil {
		message := fmt.Sprintf("‚úÖ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ %d –¥–Ω–µ–π!\n\nüìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: %s",
			days,
			subscription.EndDate.Format("02.01.2006 15:04"))
		_ = uc.notificationService.SendToUser(ctx, userID, "VPN –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", message, false)
	}

	return nil
}

// GetAvailableServers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *VPNUseCase) GetAvailableServers(ctx context.Context) ([]*domain.Server, error) {
	return uc.serverService.GetAvailableServers(ctx)
}

// GetServerHealth –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
func (uc *VPNUseCase) GetServerHealth(ctx context.Context, serverID int64) (*domain.ServerHealth, error) {
	return uc.serverService.GetServerHealth(ctx, serverID)
}

// GetAllServersHealth –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *VPNUseCase) GetAllServersHealth(ctx context.Context) (map[int64]*domain.ServerHealth, error) {
	return uc.serverService.GetAllServersHealth(ctx)
}

// GetServerStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
func (uc *VPNUseCase) GetServerStats(ctx context.Context, serverID int64) (*domain.ServerStats, error) {
	return uc.serverService.GetServerStats(ctx, serverID)
}

// GetAllServersStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *VPNUseCase) GetAllServersStats(ctx context.Context) (map[int64]*domain.ServerStats, error) {
	return uc.serverService.GetAllServersStats(ctx)
}

// StartHealthMonitoring –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *VPNUseCase) StartHealthMonitoring(ctx context.Context) error {
	return uc.serverService.StartHealthMonitoring(ctx)
}

// StopHealthMonitoring –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
func (uc *VPNUseCase) StopHealthMonitoring() error {
	return uc.serverService.StopHealthMonitoring()
}

// IsHealthMonitoringActive –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
func (uc *VPNUseCase) IsHealthMonitoringActive() bool {
	return uc.serverService.IsHealthMonitoringActive()
}
