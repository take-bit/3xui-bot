package usecase

import (
	"context"
	"fmt"
	"strings"
	"time"

	"3xui-bot/internal/domain"
)

// PromocodeUseCase –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç use case –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
type PromocodeUseCase struct {
	promocodeService    domain.PromocodeService
	subscriptionService domain.SubscriptionService
	userService         domain.UserService
	notificationService domain.NotificationService
}

// NewPromocodeUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Promocode use case
func NewPromocodeUseCase(
	promocodeService domain.PromocodeService,
	subscriptionService domain.SubscriptionService,
	userService domain.UserService,
	notificationService domain.NotificationService,
) *PromocodeUseCase {
	return &PromocodeUseCase{
		promocodeService:    promocodeService,
		subscriptionService: subscriptionService,
		userService:         userService,
		notificationService: notificationService,
	}
}

// CreatePromocode —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
func (uc *PromocodeUseCase) CreatePromocode(ctx context.Context, code string, promocodeType domain.PromocodeType, value int, usageLimit int, expiresAt *time.Time) (*domain.Promocode, error) {
	// 1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
	code = strings.ToUpper(strings.TrimSpace(code))
	if code == "" {
		return nil, fmt.Errorf("promocode code cannot be empty")
	}

	// 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
	promocode, err := uc.promocodeService.Create(ctx, code, promocodeType, value, usageLimit, expiresAt)
	if err != nil {
		return nil, fmt.Errorf("failed to create promocode: %w", err)
	}

	return promocode, nil
}

// ApplyPromocode –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
func (uc *PromocodeUseCase) ApplyPromocode(ctx context.Context, userID int64, code string) (*PromocodeResult, error) {
	// 1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
	code = strings.ToUpper(strings.TrimSpace(code))
	if code == "" {
		return nil, fmt.Errorf("promocode code cannot be empty")
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 3. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
	promocode, err := uc.promocodeService.Validate(ctx, code)
	if err != nil {
		return nil, fmt.Errorf("invalid promocode: %w", err)
	}

	// 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
	err = uc.promocodeService.Use(ctx, code, user.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to apply promocode: %w", err)
	}

	// 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
	result := &PromocodeResult{
		Promocode: promocode,
		Success:   true,
		Message:   "",
		DaysAdded: 0,
		Discount:  0,
	}

	switch promocode.Type {
	case domain.PromocodeTypeExtraDays:
		// –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
		err = uc.subscriptionService.Extend(ctx, user.ID, promocode.Value)
		if err != nil {
			return nil, fmt.Errorf("failed to extend trial subscription: %w", err)
		}
		result.DaysAdded = promocode.Value
		result.Message = fmt.Sprintf("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n\n‚è∞ –î–æ–±–∞–≤–ª–µ–Ω–æ %d –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", promocode.Value)

	case domain.PromocodeTypeDiscount:
		// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏
		result.Discount = promocode.Value
		result.Message = fmt.Sprintf("üí∞ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n\nüí∏ –°–∫–∏–¥–∫–∞: %d%%", promocode.Value)

	default:
		return nil, fmt.Errorf("unknown promocode type: %s", promocode.Type)
	}

	// 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if uc.notificationService != nil {
		_ = uc.notificationService.SendToUser(ctx, user.TelegramID, "–ü—Ä–æ–º–æ–∫–æ–¥", result.Message, false)
	}

	return result, nil
}

// ValidatePromocode –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
func (uc *PromocodeUseCase) ValidatePromocode(ctx context.Context, code string) (*PromocodeValidation, error) {
	// 1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
	code = strings.ToUpper(strings.TrimSpace(code))
	if code == "" {
		return nil, fmt.Errorf("promocode code cannot be empty")
	}

	// 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
	promocode, err := uc.promocodeService.Validate(ctx, code)
	if err != nil {
		return &PromocodeValidation{
			Valid:     false,
			Message:   fmt.Sprintf("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: %v", err),
			Promocode: nil,
		}, nil
	}

	// 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
	var message string
	switch promocode.Type {
	case domain.PromocodeTypeExtraDays:
		message = fmt.Sprintf("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!\n\n‚è∞ –î–æ–±–∞–≤–∏—Ç %d –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", promocode.Value)
	case domain.PromocodeTypeDiscount:
		message = fmt.Sprintf("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!\n\nüí∏ –°–∫–∏–¥–∫–∞: %d%%", promocode.Value)
	default:
		message = "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!"
	}

	validation := &PromocodeValidation{
		Valid:     true,
		Message:   message,
		Promocode: promocode,
	}

	return validation, nil
}

// GetActivePromocodes –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
func (uc *PromocodeUseCase) GetActivePromocodes(ctx context.Context) ([]*domain.Promocode, error) {
	return uc.promocodeService.GetActive(ctx)
}

// DeactivatePromocode –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
func (uc *PromocodeUseCase) DeactivatePromocode(ctx context.Context, code string) error {
	// 1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
	code = strings.ToUpper(strings.TrimSpace(code))
	if code == "" {
		return fmt.Errorf("promocode code cannot be empty")
	}

	// 2. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
	err := uc.promocodeService.Deactivate(ctx, code)
	if err != nil {
		return fmt.Errorf("failed to deactivate promocode: %w", err)
	}

	return nil
}

// GetPromocodeStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
func (uc *PromocodeUseCase) GetPromocodeStats(ctx context.Context) (*PromocodeStats, error) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
	return nil, fmt.Errorf("promocode stats not implemented yet")
}

// CreateBulkPromocodes —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
func (uc *PromocodeUseCase) CreateBulkPromocodes(ctx context.Context, count int, prefix string, promocodeType domain.PromocodeType, value int, usageLimit int, expiresAt *time.Time) ([]*domain.Promocode, error) {
	var promocodes []*domain.Promocode

	for i := 0; i < count; i++ {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
		code := fmt.Sprintf("%s%04d", prefix, i+1)

		promocode, err := uc.promocodeService.Create(ctx, code, promocodeType, value, usageLimit, expiresAt)
		if err != nil {
			// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
			fmt.Printf("Failed to create promocode %s: %v\n", code, err)
			continue
		}

		promocodes = append(promocodes, promocode)
	}

	return promocodes, nil
}

// PromocodeResult –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
type PromocodeResult struct {
	Promocode *domain.Promocode `json:"promocode"`
	Success   bool              `json:"success"`
	Message   string            `json:"message"`
	DaysAdded int               `json:"days_added,omitempty"`
	Discount  int               `json:"discount,omitempty"`
}

// PromocodeValidation –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
type PromocodeValidation struct {
	Valid     bool              `json:"valid"`
	Message   string            `json:"message"`
	Promocode *domain.Promocode `json:"promocode,omitempty"`
}

// PromocodeStats –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
type PromocodeStats struct {
	TotalPromocodes  int     `json:"total_promocodes"`
	ActivePromocodes int     `json:"active_promocodes"`
	UsedPromocodes   int     `json:"used_promocodes"`
	TotalUsage       int     `json:"total_usage"`
	AverageUsage     float64 `json:"average_usage"`
	MostPopularType  string  `json:"most_popular_type"`
}
