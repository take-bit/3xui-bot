package usecase

import (
	"context"
	"fmt"
	"time"

	"3xui-bot/internal/domain"
)

// SubscriptionUseCase –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç use case –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
type SubscriptionUseCase struct {
	subscriptionService domain.SubscriptionService
	vpnUseCase          *VPNUseCase
	userService         domain.UserService
	notificationService domain.NotificationService
}

// NewSubscriptionUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Subscription use case
func NewSubscriptionUseCase(
	subscriptionService domain.SubscriptionService,
	vpnUseCase *VPNUseCase,
	userService domain.UserService,
	notificationService domain.NotificationService,
) *SubscriptionUseCase {
	return &SubscriptionUseCase{
		subscriptionService: subscriptionService,
		vpnUseCase:          vpnUseCase,
		userService:         userService,
		notificationService: notificationService,
	}
}

// CreateTrialSubscription —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
func (uc *SubscriptionUseCase) CreateTrialSubscription(ctx context.Context, userID int64, days int) (*domain.Subscription, error) {
	// 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := uc.subscriptionService.CreateTrial(ctx, userID, days)
	if err != nil {
		return nil, fmt.Errorf("failed to create trial subscription: %w", err)
	}

	// 2. –°–æ–∑–¥–∞–µ–º VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	_, err = uc.vpnUseCase.CreateVPNConnection(ctx, userID, "")
	if err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
		fmt.Printf("Failed to create VPN connection for trial: %v\n", err)
	}

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if uc.notificationService != nil {
		user, err := uc.userService.GetByTelegramID(ctx, userID)
		if err == nil {
			message := fmt.Sprintf("üéÅ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç %d –¥–Ω–µ–π\nüîó VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ\n\n‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç: %s",
				days, subscription.EndDate.Format("02.01.2006 15:04"))
			_ = uc.notificationService.SendToUser(ctx, user.TelegramID, "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", message, false)
		}
	}

	return subscription, nil
}

// ExtendSubscription –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
func (uc *SubscriptionUseCase) ExtendSubscription(ctx context.Context, userID int64, days int) error {
	// 1. –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	err := uc.subscriptionService.Extend(ctx, userID, days)
	if err != nil {
		return fmt.Errorf("failed to extend subscription: %w", err)
	}

	// 2. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ UpdateConnectionExpiry –≤ VPNUseCase
	// err = uc.vpnUseCase.UpdateConnectionExpiry(ctx, userID, time.Now().AddDate(0, 0, days))
	// if err != nil {
	//     // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
	//     fmt.Printf("Failed to update VPN connection expiry: %v\n", err)
	// }

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if uc.notificationService != nil {
		user, err := uc.userService.GetByTelegramID(ctx, userID)
		if err == nil {
			subscription, err := uc.subscriptionService.GetActive(ctx, user.ID)
			if err == nil {
				message := fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ %d –¥–Ω–µ–π!\n\nüìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: %s",
					days, subscription.EndDate.Format("02.01.2006 15:04"))
				_ = uc.notificationService.SendToUser(ctx, user.TelegramID, "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ", message, false)
			}
		}
	}

	return nil
}

// GetActiveSubscription –ø–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *SubscriptionUseCase) GetActiveSubscription(ctx context.Context, userID int64) (*SubscriptionInfo, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := uc.subscriptionService.GetActive(ctx, user.ID)
	if err != nil {
		return nil, fmt.Errorf("no active subscription found: %w", err)
	}

	// 3. –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
	daysRemaining, err := uc.subscriptionService.GetDaysRemaining(ctx, user.ID)
	if err != nil {
		daysRemaining = 0
	}

	// 4. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
	var vpnConnection *domain.VPNConnection
	vpnConnection, err = uc.vpnUseCase.GetVPNConnectionInfo(ctx, userID)
	if err != nil {
		vpnConnection = nil // VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
	}

	info := &SubscriptionInfo{
		Subscription:  subscription,
		DaysRemaining: daysRemaining,
		VPNConnection: vpnConnection,
		IsActive:      true,
		ExpiresAt:     subscription.EndDate,
	}

	return info, nil
}

// ExpireSubscription –∏—Å—Ç–µ–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
func (uc *SubscriptionUseCase) ExpireSubscription(ctx context.Context, userID int64) error {
	// 1. –ò—Å—Ç–µ–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
	err := uc.subscriptionService.Expire(ctx, userID)
	if err != nil {
		return fmt.Errorf("failed to expire subscription: %w", err)
	}

	// 2. –£–¥–∞–ª—è–µ–º VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	err = uc.vpnUseCase.DeleteVPNConnection(ctx, userID)
	if err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
		fmt.Printf("Failed to delete VPN connection after expiration: %v\n", err)
	}

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if uc.notificationService != nil {
		user, err := uc.userService.GetByTelegramID(ctx, userID)
		if err == nil {
			message := "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n\nüîÑ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN\n\nüí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤ –º–µ–Ω—é"
			_ = uc.notificationService.SendToUser(ctx, user.TelegramID, "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞", message, false)
		}
	}

	return nil
}

// CheckExpiredSubscriptions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
func (uc *SubscriptionUseCase) CheckExpiredSubscriptions(ctx context.Context) error {
	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
	err := uc.subscriptionService.CheckExpired(ctx)
	if err != nil {
		return fmt.Errorf("failed to check expired subscriptions: %w", err)
	}

	// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
	// TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

	return nil
}

// GetSubscriptionHistory –ø–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *SubscriptionUseCase) GetSubscriptionHistory(ctx context.Context, userID int64) ([]*domain.Subscription, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–ø–∏—Å–æ–∫
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetHistory –≤ SubscriptionService
	// return uc.subscriptionService.GetHistory(ctx, user.ID)
	return nil, fmt.Errorf("subscription history not implemented yet")
}

// GetDaysRemaining –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func (uc *SubscriptionUseCase) GetDaysRemaining(ctx context.Context, userID int64) (int, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return 0, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
	return uc.subscriptionService.GetDaysRemaining(ctx, user.ID)
}

// SendExpiryNotifications –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (uc *SubscriptionUseCase) SendExpiryNotifications(ctx context.Context) error {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏
	// 1. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ —á–µ—Ä–µ–∑ 1, 3, 7 –¥–Ω–µ–π
	// 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

	return fmt.Errorf("expiry notifications not implemented yet")
}

// GetSubscriptionStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
func (uc *SubscriptionUseCase) GetSubscriptionStats(ctx context.Context) (*SubscriptionStats, error) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
	return nil, fmt.Errorf("subscription stats not implemented yet")
}

// SubscriptionInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
type SubscriptionInfo struct {
	Subscription  *domain.Subscription  `json:"subscription"`
	DaysRemaining int                   `json:"days_remaining"`
	VPNConnection *domain.VPNConnection `json:"vpn_connection,omitempty"`
	IsActive      bool                  `json:"is_active"`
	ExpiresAt     time.Time             `json:"expires_at"`
}

// SubscriptionStats –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
type SubscriptionStats struct {
	TotalSubscriptions   int     `json:"total_subscriptions"`
	ActiveSubscriptions  int     `json:"active_subscriptions"`
	ExpiredSubscriptions int     `json:"expired_subscriptions"`
	TrialSubscriptions   int     `json:"trial_subscriptions"`
	AverageDuration      float64 `json:"average_duration"`
	RenewalRate          float64 `json:"renewal_rate"`
}
