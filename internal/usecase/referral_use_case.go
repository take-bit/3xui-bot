package usecase

import (
	"context"
	"fmt"

	"3xui-bot/internal/domain"
)

// ReferralUseCase –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç use case –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
type ReferralUseCase struct {
	referralService     domain.ReferralService
	userService         domain.UserService
	subscriptionService domain.SubscriptionService
	notificationService domain.NotificationService
}

// NewReferralUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Referral use case
func NewReferralUseCase(
	referralService domain.ReferralService,
	userService domain.UserService,
	subscriptionService domain.SubscriptionService,
	notificationService domain.NotificationService,
) *ReferralUseCase {
	return &ReferralUseCase{
		referralService:     referralService,
		userService:         userService,
		subscriptionService: subscriptionService,
		notificationService: notificationService,
	}
}

// CreateReferral —Å–æ–∑–¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
func (uc *ReferralUseCase) CreateReferral(ctx context.Context, referrerID int64, referredID int64) error {
	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
	referrer, err := uc.userService.GetByTelegramID(ctx, referrerID)
	if err != nil {
		return fmt.Errorf("failed to get referrer: %w", err)
	}

	referred, err := uc.userService.GetByTelegramID(ctx, referredID)
	if err != nil {
		return fmt.Errorf("failed to get referred user: %w", err)
	}

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∏—Ç —Å–∞–º —Å–µ–±—è
	if referrer.ID == referred.ID {
		return fmt.Errorf("user cannot refer themselves")
	}

	// 3. –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
	err = uc.referralService.CreateReferral(ctx, referrer.ID, referred.ID)
	if err != nil {
		return fmt.Errorf("failed to create referral: %w", err)
	}

	// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	if uc.notificationService != nil {
		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
		referrerMessage := fmt.Sprintf("üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\nüí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞", referred.FirstName)
		_ = uc.notificationService.SendToUser(ctx, referrer.TelegramID, "–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª", referrerMessage, false)

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—É
		referredMessage := fmt.Sprintf("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüéÅ –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç %s\nüí∞ –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—É—á–∏—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", referrer.FirstName)
		_ = uc.notificationService.SendToUser(ctx, referred.TelegramID, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", referredMessage, false)
	}

	return nil
}

// ProcessPaymentReward –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø–ª–∞—Ç–µ–∂ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
func (uc *ReferralUseCase) ProcessPaymentReward(ctx context.Context, userID int64, amount int) error {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
	err = uc.referralService.ProcessPaymentReward(ctx, user.ID, amount)
	if err != nil {
		return fmt.Errorf("failed to process payment reward: %w", err)
	}

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–∏
	// TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

	return nil
}

// GetReferralStats –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *ReferralUseCase) GetReferralStats(ctx context.Context, userID int64) (*ReferralStatsInfo, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
	stats, err := uc.referralService.GetStats(ctx, user.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get referral stats: %w", err)
	}

	// 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	info := &ReferralStatsInfo{
		User:            user,
		ReferralStats:   stats,
		ReferralLink:    fmt.Sprintf("https://t.me/your_bot?start=ref_%d", user.ID),
		TotalEarnings:   stats.TotalRewardDays, // –ò—Å–ø–æ–ª—å–∑—É–µ–º TotalRewardDays –∫–∞–∫ earnings
		PendingEarnings: stats.PendingRewardDays,
		PaidEarnings:    stats.PaidRewardDays,
	}

	return info, nil
}

// GetUnpaidRewards –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
func (uc *ReferralUseCase) GetUnpaidRewards(ctx context.Context) ([]*domain.Referral, error) {
	return uc.referralService.GetUnpaidRewards(ctx)
}

// PayReward –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
func (uc *ReferralUseCase) PayReward(ctx context.Context, referralID int64) error {
	// 1. –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
	err := uc.referralService.PayReward(ctx, referralID)
	if err != nil {
		return fmt.Errorf("failed to pay reward: %w", err)
	}

	// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ
	// TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

	return nil
}

// GetReferralLink –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *ReferralUseCase) GetReferralLink(ctx context.Context, userID int64) (string, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return "", fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
	referralLink := fmt.Sprintf("https://t.me/your_bot?start=ref_%d", user.ID)

	return referralLink, nil
}

// GetReferralLeaderboard –ø–æ–ª—É—á–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
func (uc *ReferralUseCase) GetReferralLeaderboard(ctx context.Context, limit int) (*ReferralLeaderboard, error) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
	return nil, fmt.Errorf("referral leaderboard not implemented yet")
}

// SendReferralReminder –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
func (uc *ReferralUseCase) SendReferralReminder(ctx context.Context, userID int64) error {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
	stats, err := uc.referralService.GetStats(ctx, user.ID)
	if err != nil {
		return fmt.Errorf("failed to get referral stats: %w", err)
	}

	// 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	referralLink := fmt.Sprintf("https://t.me/your_bot?start=ref_%d", user.ID)
	message := fmt.Sprintf("üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\nüë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: %d\nüí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: %d –¥–Ω–µ–π\n\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n%s\n\nüì¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è!",
		stats.TotalReferrals, stats.TotalRewardDays, referralLink)

	// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
	if uc.notificationService != nil {
		_ = uc.notificationService.SendToUser(ctx, user.TelegramID, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", message, false)
	}

	return nil
}

// ProcessReferralSignup –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
func (uc *ReferralUseCase) ProcessReferralSignup(ctx context.Context, referrerID int64, referredID int64) error {
	// 1. –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
	err := uc.CreateReferral(ctx, referrerID, referredID)
	if err != nil {
		return fmt.Errorf("failed to create referral: %w", err)
	}

	// 2. –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
	referred, err := uc.userService.GetByTelegramID(ctx, referredID)
	if err == nil {
		// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –¥–Ω–µ–π –≤–º–µ—Å—Ç–æ 3
		_, err = uc.subscriptionService.CreateTrial(ctx, referred.ID, 7)
		if err != nil {
			fmt.Printf("Failed to create extended trial for referral: %v\n", err)
		}
	}

	return nil
}

// ReferralStatsInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
type ReferralStatsInfo struct {
	User            *domain.User          `json:"user"`
	ReferralStats   *domain.ReferralStats `json:"referral_stats"`
	ReferralLink    string                `json:"referral_link"`
	TotalEarnings   int                   `json:"total_earnings"`
	PendingEarnings int                   `json:"pending_earnings"`
	PaidEarnings    int                   `json:"paid_earnings"`
}

// ReferralLeaderboard –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
type ReferralLeaderboard struct {
	Users []ReferralLeader `json:"users"`
	Total int              `json:"total"`
}

// ReferralLeader –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏–¥–µ—Ä–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
type ReferralLeader struct {
	UserID         int64  `json:"user_id"`
	Username       string `json:"username"`
	FirstName      string `json:"first_name"`
	TotalReferrals int    `json:"total_referrals"`
	TotalEarnings  int    `json:"total_earnings"`
	Rank           int    `json:"rank"`
}
