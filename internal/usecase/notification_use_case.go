package usecase

import (
	"context"
	"fmt"
	"time"

	"3xui-bot/internal/domain"
)

// NotificationUseCase –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç use case –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
type NotificationUseCase struct {
	notificationService domain.NotificationService
	userService         domain.UserService
}

// NewNotificationUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Notification use case
func NewNotificationUseCase(
	notificationService domain.NotificationService,
	userService domain.UserService,
) *NotificationUseCase {
	return &NotificationUseCase{
		notificationService: notificationService,
		userService:         userService,
	}
}

// SendToUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (uc *NotificationUseCase) SendToUser(ctx context.Context, userID int64, title, message string, isHTML bool) error {
	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	_, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	err = uc.notificationService.SendToUser(ctx, userID, title, message, isHTML)
	if err != nil {
		return fmt.Errorf("failed to send notification to user: %w", err)
	}

	return nil
}

// SendToAll –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (uc *NotificationUseCase) SendToAll(ctx context.Context, title, message string, isHTML bool) error {
	// 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	err := uc.notificationService.SendToAll(ctx, title, message, isHTML)
	if err != nil {
		return fmt.Errorf("failed to send notification to all users: %w", err)
	}

	return nil
}

// CreateDraft —Å–æ–∑–¥–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (uc *NotificationUseCase) CreateDraft(ctx context.Context, notificationType domain.NotificationType, userID *int64, title, message string, isHTML bool) (*domain.Notification, error) {
	// 1. –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
	notification, err := uc.notificationService.CreateDraft(ctx, notificationType, userID, title, message, isHTML)
	if err != nil {
		return nil, fmt.Errorf("failed to create notification draft: %w", err)
	}

	return notification, nil
}

// UpdateDraft –æ–±–Ω–æ–≤–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (uc *NotificationUseCase) UpdateDraft(ctx context.Context, id int64, title, message string, isHTML bool) error {
	// 1. –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
	err := uc.notificationService.UpdateDraft(ctx, id, title, message, isHTML)
	if err != nil {
		return fmt.Errorf("failed to update notification draft: %w", err)
	}

	return nil
}

// SendDraft –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (uc *NotificationUseCase) SendDraft(ctx context.Context, id int64) error {
	// 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
	err := uc.notificationService.SendDraft(ctx, id)
	if err != nil {
		return fmt.Errorf("failed to send notification draft: %w", err)
	}

	return nil
}

// GetUserNotifications –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *NotificationUseCase) GetUserNotifications(ctx context.Context, userID int64) ([]*domain.Notification, error) {
	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	_, err := uc.userService.GetByTelegramID(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	notifications, err := uc.notificationService.GetUserNotifications(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user notifications: %w", err)
	}

	return notifications, nil
}

// SendWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (uc *NotificationUseCase) SendWelcomeMessage(ctx context.Context, userID int64, firstName string) error {
	message := fmt.Sprintf("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!\n\nüéÅ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è\n\nüöÄ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π", firstName)

	return uc.SendToUser(ctx, userID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", message, false)
}

// SendSubscriptionExpired –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (uc *NotificationUseCase) SendSubscriptionExpired(ctx context.Context, userID int64) error {
	message := "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n\nüîÑ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN\n\nüí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤ –º–µ–Ω—é"

	return uc.SendToUser(ctx, userID, "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞", message, false)
}

// SendSubscriptionExpiringSoon –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (uc *NotificationUseCase) SendSubscriptionExpiringSoon(ctx context.Context, userID int64, daysRemaining int) error {
	message := fmt.Sprintf("‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ %d –¥–Ω–µ–π\n\nüîÑ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN\n\nüí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤ –º–µ–Ω—é", daysRemaining)

	return uc.SendToUser(ctx, userID, "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç", message, false)
}

// SendPaymentSuccess –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
func (uc *NotificationUseCase) SendPaymentSuccess(ctx context.Context, userID int64, amount int, currency string) error {
	message := fmt.Sprintf("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\nüí∞ –°—É–º–º–∞: %d %s\nüéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\nüîó VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", amount, currency)

	return uc.SendToUser(ctx, userID, "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω", message, false)
}

// SendPaymentFailed –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
func (uc *NotificationUseCase) SendPaymentFailed(ctx context.Context, userID int64, reason string) error {
	message := fmt.Sprintf("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª\n\nüìã –ü—Ä–∏—á–∏–Ω–∞: %s\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", reason)

	return uc.SendToUser(ctx, userID, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª", message, false)
}

// SendVPNConnectionCreated –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func (uc *NotificationUseCase) SendVPNConnectionCreated(ctx context.Context, userID int64, configURL string, expiresAt time.Time) error {
	message := fmt.Sprintf("‚úÖ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\nüîó –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: %s\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: %s\n\nüì± –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ VPN", configURL, expiresAt.Format("02.01.2006 15:04"))

	return uc.SendToUser(ctx, userID, "VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", message, false)
}

// SendVPNConnectionDeleted –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func (uc *NotificationUseCase) SendVPNConnectionDeleted(ctx context.Context, userID int64) error {
	message := "‚ùå VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ\n\nüîÑ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –º–µ–Ω—é"

	return uc.SendToUser(ctx, userID, "VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", message, false)
}

// SendPromocodeApplied –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
func (uc *NotificationUseCase) SendPromocodeApplied(ctx context.Context, userID int64, code string, daysAdded int) error {
	message := fmt.Sprintf("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ '%s' –ø—Ä–∏–º–µ–Ω–µ–Ω!\n\n‚è∞ –î–æ–±–∞–≤–ª–µ–Ω–æ %d –¥–Ω–µ–π\n\nüéâ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø", code, daysAdded)

	return uc.SendToUser(ctx, userID, "–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω", message, false)
}

// SendReferralReward –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–∏
func (uc *NotificationUseCase) SendReferralReward(ctx context.Context, userID int64, amount int, referredUser string) error {
	message := fmt.Sprintf("üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!\n\nüë§ –ó–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s\nüí∏ –°—É–º–º–∞: %d —Ä—É–±.\n\nüéâ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!", referredUser, amount)

	return uc.SendToUser(ctx, userID, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", message, false)
}

// SendMaintenanceNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö
func (uc *NotificationUseCase) SendMaintenanceNotification(ctx context.Context, startTime, endTime time.Time) error {
	message := fmt.Sprintf("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n\n‚è∞ –ù–∞—á–∞–ª–æ: %s\n‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: %s\n\n‚ö†Ô∏è –í —ç—Ç–æ –≤—Ä–µ–º—è VPN –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
		startTime.Format("02.01.2006 15:04"), endTime.Format("02.01.2006 15:04"))

	return uc.SendToAll(ctx, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã", message, false)
}

// SendServerStatusUpdate –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
func (uc *NotificationUseCase) SendServerStatusUpdate(ctx context.Context, serverName string, status string) error {
	var emoji string
	switch status {
	case "up":
		emoji = "‚úÖ"
	case "down":
		emoji = "‚ùå"
	case "maintenance":
		emoji = "üîß"
	default:
		emoji = "‚ÑπÔ∏è"
	}

	message := fmt.Sprintf("%s –°–µ—Ä–≤–µ—Ä %s\n\nüìä –°—Ç–∞—Ç—É—Å: %s\n\nüîó VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ", emoji, serverName, status)

	return uc.SendToAll(ctx, "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", message, false)
}

// SendCustomMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (uc *NotificationUseCase) SendCustomMessage(ctx context.Context, userID int64, title, message string, isHTML bool) error {
	return uc.SendToUser(ctx, userID, title, message, isHTML)
}

// SendBulkMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (uc *NotificationUseCase) SendBulkMessage(ctx context.Context, title, message string, isHTML bool) error {
	return uc.SendToAll(ctx, title, message, isHTML)
}

// ScheduleNotification –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (uc *NotificationUseCase) ScheduleNotification(ctx context.Context, userID int64, title, message string, sendAt time.Time) error {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	return fmt.Errorf("scheduled notifications not implemented yet")
}

// GetNotificationStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (uc *NotificationUseCase) GetNotificationStats(ctx context.Context) (*NotificationStats, error) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	return nil, fmt.Errorf("notification stats not implemented yet")
}

// NotificationStats –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type NotificationStats struct {
	TotalSent           int           `json:"total_sent"`
	SuccessfullySent    int           `json:"successfully_sent"`
	FailedSent          int           `json:"failed_sent"`
	SuccessRate         float64       `json:"success_rate"`
	AverageDeliveryTime time.Duration `json:"average_delivery_time"`
}
